{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IoT Device Management System - Internal Documentation","text":"<p>Welcome to the internal documentation for our IoT Device Management System. This documentation covers the complete architecture, APIs, and operational procedures for the system.</p>"},{"location":"#system-overview","title":"System Overview","text":"<p>Our IoT Device Management System provides real-time tracking and monitoring of IoT devices through a multi-tier architecture:</p> <ul> <li>Device Layer: IoT devices sending sensor data via CoAP</li> <li>Ingestion Layer: Fly.io Python server handling CoAP-to-HTTPS translation</li> <li>Processing Layer: Supabase Edge Functions for data processing and location services</li> <li>Storage Layer: Supabase PostgreSQL with Row Level Security</li> <li>Frontend Layer: React dashboard for device monitoring and management</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>For development and operational tasks, refer to these quick links:</p> <ul> <li>System Architecture - High-level system design</li> <li>API Documentation - HTTP API specifications</li> <li>Local Setup - Development environment setup</li> <li>Deployment Guide - Production deployment procedures</li> <li>Troubleshooting - Common issues and solutions</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Real-time Location Tracking: GNSS, Wi-Fi, and cellular positioning</li> <li>Secure Data Ingestion: HMAC signature verification for all device data</li> <li>Role-based Access Control: Admin, developer, moderator, and user permission levels</li> <li>Interactive Dashboard: Live device status and location visualization</li> <li>Scalable Architecture: Auto-scaling Fly.io infrastructure with Supabase backend</li> </ul>"},{"location":"#security-model","title":"Security Model","text":"<p>The system implements multiple security layers:</p> <ul> <li>Device Authentication: HMAC-SHA256 signature verification</li> <li>Transport Security: HTTPS/TLS encryption for all API communications</li> <li>Access Control: JWT-based authentication with Row Level Security (RLS)</li> <li>Data Validation: Schema validation and input sanitization</li> <li>Network Security: Rate limiting and DDoS protection</li> </ul>"},{"location":"#support-maintenance","title":"Support &amp; Maintenance","text":"<p>For system support and maintenance issues:</p> <ol> <li>Check the Monitoring section for system health</li> <li>Review Troubleshooting for common solutions</li> <li>Consult Change Log for recent updates</li> <li>Contact the engineering team for escalation</li> </ol> <p>Last Updated: August 31, 2025 Version: 1.0.0</p>"},{"location":"DATA_FLOW_GUIDE/","title":"IoT Data Flow Guide","text":""},{"location":"DATA_FLOW_GUIDE/#overview","title":"Overview","text":"<p>This guide explains how data flows from IoT devices through Fly.io to Supabase, what information devices need, and how to monitor the entire pipeline.</p>"},{"location":"DATA_FLOW_GUIDE/#complete-data-flow","title":"Complete Data Flow","text":"<pre><code>flowchart TD\n    A[IoT Device] --&gt;|CoAP/UDP Port 5683| B[Fly.io Python Server]\n    B --&gt;|Parse Protobuf| C[Extract Device Data]\n    C --&gt;|Generate HMAC| D[Create Signed Payload]\n    D --&gt;|HTTPS POST| E[Supabase Edge Function]\n    E --&gt;|Verify HMAC| F[Process Data]\n    F --&gt;|Location Data?| G{Data Type Check}\n    G --&gt;|Yes| H[HERE Positioning API]\n    G --&gt;|No| I[Direct Processing]\n    H --&gt; J[Store in Database]\n    I --&gt; J\n    J --&gt;|Real-time Updates| K[Frontend Dashboard]\n\n    style A fill:#e1f5fe\n    style B fill:#f3e5f5\n    style E fill:#e8f5e8\n    style J fill:#fff3e0\n    style K fill:#fce4ec</code></pre>"},{"location":"DATA_FLOW_GUIDE/#device-configuration-requirements","title":"Device Configuration Requirements","text":""},{"location":"DATA_FLOW_GUIDE/#what-your-iot-device-needs-to-know","title":"What Your IoT Device Needs to Know","text":"<p>Essential Information: - Server Address: <code>your-app.fly.dev</code> (replace with your actual Fly.io app name) - Port: <code>5683</code> (CoAP standard port) - Protocol: <code>CoAP/UDP</code> - Endpoint: <code>/uplink</code> - Device ID: Unique identifier (e.g., <code>soil_sensor_001</code>, <code>tracker_042</code>) - Data Format: Protobuf using your <code>uplink_pb2</code> schema</p> <p>Example Device Configuration: <pre><code>CoAP Server: my-iot-server.fly.dev\nPort: 5683\nProtocol: UDP\nEndpoint: /uplink\nDevice ID: soil_sensor_001\nMessage Format: Protobuf (uplink.proto)\n</code></pre></p>"},{"location":"DATA_FLOW_GUIDE/#device-data-structure","title":"Device Data Structure","text":"<p>Your devices send protobuf messages with this structure:</p> <pre><code>message Uplink {\n  uint32 uplink_count = 1;\n\n  // Device heartbeat with configuration and status\n  Heartbeat heartbeat = 2;\n\n  // Location data (WiFi/Cell/GNSS)\n  Location location = 3;\n}\n\nmessage Heartbeat {\n  DeviceConfig config = 1;\n  Activity activity = 2;\n  Reboot reboot = 3;\n  int32 modem_temperature = 4;\n}\n</code></pre>"},{"location":"DATA_FLOW_GUIDE/#sample-device-payloads","title":"Sample Device Payloads","text":"<p>1. Soil Sensor Data: <pre><code>{\n  \"devid\": \"soil_sensor_001\",\n  \"uplink_count\": 123,\n  \"temperature\": 23.5,\n  \"soil_humidity\": 65.2,\n  \"ph_level\": 6.8,\n  \"nitrogen_level\": 45,\n  \"phosphorus_level\": 12,\n  \"potassium_level\": 38\n}\n</code></pre></p> <p>2. Location Tracker: <pre><code>{\n  \"devid\": \"tracker_001\",\n  \"uplink_count\": 456,\n  \"wifi\": [\n    {\"mac\": \"AA:BB:CC:DD:EE:FF\", \"rssi\": -45},\n    {\"mac\": \"11:22:33:44:55:66\", \"rssi\": -67}\n  ],\n  \"cells\": [\n    {\"mcc\": 310, \"mnc\": 410, \"lac\": 12345, \"cid\": 67890, \"rssi\": -78}\n  ],\n  \"gnss\": {\n    \"latitude\": 37.7749,\n    \"longitude\": -122.4194,\n    \"accuracy\": 10\n  }\n}\n</code></pre></p>"},{"location":"DATA_FLOW_GUIDE/#data-processing-pipeline","title":"Data Processing Pipeline","text":""},{"location":"DATA_FLOW_GUIDE/#step-1-device-transmission","title":"Step 1: Device Transmission","text":"<ul> <li>Device collects sensor readings</li> <li>Packages data in protobuf format</li> <li>Sends CoAP message to Fly.io server</li> <li>Uses UDP for efficiency (low power consumption)</li> </ul>"},{"location":"DATA_FLOW_GUIDE/#step-2-flyio-processing","title":"Step 2: Fly.io Processing","text":"<pre><code># Python server receives and processes\nasync def render_post(self, request):\n    # Parse protobuf payload\n    uplink = uplink_pb2.Uplink()\n    uplink.ParseFromString(request.payload)\n\n    # Extract different data types\n    extract_device_config(uplink)\n    extract_sensor_data(uplink)\n    extract_location_data(uplink)\n\n    # Forward to Supabase with HMAC signature\n    await store_uplink_to_supabase(processed_data)\n</code></pre>"},{"location":"DATA_FLOW_GUIDE/#step-3-hmac-security","title":"Step 3: HMAC Security","text":"<pre><code># Generate secure signature\nimport hmac\nimport hashlib\n\ndef generate_hmac(secret, payload):\n    signature = hmac.new(\n        secret.encode(),\n        json.dumps(payload).encode(),\n        hashlib.sha256\n    ).hexdigest()\n    return f\"sha256={signature}\"\n</code></pre>"},{"location":"DATA_FLOW_GUIDE/#step-4-supabase-edge-function","title":"Step 4: Supabase Edge Function","text":"<pre><code>// Verify signature and process data\nconst signature = request.headers.get('X-Signature')\nconst isValid = await verifyHMAC(signature, body, secret)\n\nif (isValid) {\n    // Process location data via HERE API\n    // Store sensor data in database\n    // Return success response\n}\n</code></pre>"},{"location":"DATA_FLOW_GUIDE/#step-5-database-storage","title":"Step 5: Database Storage","text":"<p>Data is stored in structured tables:</p> <p>sensor_data table: <pre><code>INSERT INTO sensor_data (devid, data_type, data, uplink_count)\nVALUES (\n  'soil_sensor_001',\n  'soil_data',\n  '{\"temperature\": 23.5, \"humidity\": 65.2, \"ph\": 6.8}',\n  123\n);\n</code></pre></p> <p>device_config table: <pre><code>UPDATE device_config \nSET \n  last_seen = now(),\n  last_uplink_count = 123,\n  temperature = 23.5\nWHERE devid = 'soil_sensor_001';\n</code></pre></p>"},{"location":"DATA_FLOW_GUIDE/#monitoring-data-flow","title":"Monitoring Data Flow","text":""},{"location":"DATA_FLOW_GUIDE/#1-device-level-monitoring","title":"1. Device Level Monitoring","text":"<p>Check if device is sending data: - Monitor device logs/status LEDs - Verify network connectivity - Check CoAP message format</p>"},{"location":"DATA_FLOW_GUIDE/#2-flyio-server-monitoring","title":"2. Fly.io Server Monitoring","text":"<pre><code># View real-time logs\nflyctl logs -a your-app\n\n# Look for these log patterns:\n# \u2705 Success: \"Received payload: a1b2c3...\"\n# \u2705 Success: \"Parsed DeviceConfig: devid: soil_001\"\n# \u2705 Success: \"Successfully stored to Supabase\"\n# \u274c Error: \"Failed to parse or handle uplink\"\n</code></pre> <p>Common Log Messages: <pre><code>[INFO] - Received payload: 0a04736f696c001268...\n[INFO] - Parsed DeviceConfig: devid: \"soil_001\" temperature: 23.5\n[INFO] - Successfully stored to Supabase\n[WARNING] - No location data in uplink\n[ERROR] - Failed to connect to Supabase: Connection timeout\n</code></pre></p>"},{"location":"DATA_FLOW_GUIDE/#3-supabase-edge-function-monitoring","title":"3. Supabase Edge Function Monitoring","text":"<p>Check Edge Function logs in Supabase dashboard: <pre><code>\u2705 \"HMAC signature verified successfully\"\n\u2705 \"Stored sensor_data: soil_data for device soil_001\"\n\u2705 \"HERE API returned location: 37.7749, -122.4194\"\n\u274c \"HMAC signature verification failed\"\n\u274c \"Missing required field: devid\"\n</code></pre></p>"},{"location":"DATA_FLOW_GUIDE/#4-database-monitoring","title":"4. Database Monitoring","text":"<pre><code>-- Check latest sensor data\nSELECT devid, data_type, data, created_at \nFROM sensor_data \nORDER BY created_at DESC \nLIMIT 10;\n\n-- Check device status\nSELECT devid, last_seen, last_uplink_count, temperature\nFROM device_config \nORDER BY last_seen DESC;\n\n-- Monitor data frequency\nSELECT \n  devid, \n  COUNT(*) as message_count,\n  MAX(created_at) as latest_message\nFROM sensor_data \nWHERE created_at &gt; NOW() - INTERVAL '1 hour'\nGROUP BY devid;\n</code></pre>"},{"location":"DATA_FLOW_GUIDE/#5-frontend-real-time-updates","title":"5. Frontend Real-time Updates","text":"<pre><code>// Subscribe to real-time updates\nconst subscription = supabase\n  .channel('sensor-updates')\n  .on('postgres_changes', {\n    event: 'INSERT',\n    schema: 'public',\n    table: 'sensor_data'\n  }, (payload) =&gt; {\n    console.log('New sensor data:', payload.new)\n    updateDashboard(payload.new)\n  })\n  .subscribe()\n</code></pre>"},{"location":"DATA_FLOW_GUIDE/#data-types-formats","title":"Data Types &amp; Formats","text":""},{"location":"DATA_FLOW_GUIDE/#supported-sensor-types","title":"Supported Sensor Types","text":"<p>1. Location Data: <pre><code>{\n  \"data_type\": \"location\",\n  \"data\": {\n    \"latitude\": 37.7749,\n    \"longitude\": -122.4194,\n    \"accuracy\": 10,\n    \"source\": \"here\"\n  }\n}\n</code></pre></p> <p>2. Soil Sensors: <pre><code>{\n  \"data_type\": \"soil_data\",\n  \"data\": {\n    \"temperature\": 23.5,\n    \"humidity\": 65.2,\n    \"ph\": 6.8,\n    \"nitrogen\": 45,\n    \"phosphorus\": 12,\n    \"potassium\": 38,\n    \"unit_temp\": \"celsius\",\n    \"unit_humidity\": \"percent\"\n  }\n}\n</code></pre></p> <p>3. Environmental Sensors: <pre><code>{\n  \"data_type\": \"environmental\",\n  \"data\": {\n    \"air_temperature\": 22.1,\n    \"air_humidity\": 60.5,\n    \"pressure\": 1013.25,\n    \"light_level\": 450\n  }\n}\n</code></pre></p> <p>4. Device Status: <pre><code>{\n  \"data_type\": \"device_status\",\n  \"data\": {\n    \"battery_level\": 85,\n    \"signal_strength\": -67,\n    \"uptime_hours\": 72,\n    \"firmware_version\": \"1.2.3\"\n  }\n}\n</code></pre></p>"},{"location":"DATA_FLOW_GUIDE/#troubleshooting-data-flow","title":"Troubleshooting Data Flow","text":""},{"location":"DATA_FLOW_GUIDE/#device-not-sending-data","title":"Device Not Sending Data","text":"<ol> <li>Check Network Connectivity</li> <li>Verify device can reach internet</li> <li>Test DNS resolution: <code>nslookup your-app.fly.dev</code></li> <li> <p>Check firewall rules for UDP port 5683</p> </li> <li> <p>Verify CoAP Configuration</p> </li> <li>Server: <code>your-app.fly.dev</code></li> <li>Port: <code>5683</code></li> <li>Protocol: <code>UDP</code></li> <li>Endpoint: <code>/uplink</code></li> </ol>"},{"location":"DATA_FLOW_GUIDE/#data-not-reaching-supabase","title":"Data Not Reaching Supabase","text":"<ol> <li> <p>Check Fly.io Logs <pre><code>flyctl logs -a your-app | grep ERROR\n</code></pre></p> </li> <li> <p>Verify HMAC Secret <pre><code>flyctl secrets list -a your-app\n# Should show FLY_INGEST_SECRET\n</code></pre></p> </li> <li> <p>Test Edge Function <pre><code>curl -X POST https://cdwtsrzshpotkfbyyyjk.supabase.co/functions/v1/ingest-sensor-data \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Signature: sha256=test\" \\\n  -d '{\"devid\":\"test\",\"test\":true}'\n</code></pre></p> </li> </ol>"},{"location":"DATA_FLOW_GUIDE/#database-issues","title":"Database Issues","text":"<ol> <li>Check RLS Policies</li> <li>Ensure authenticated users can read sensor_data</li> <li> <p>Verify admin/moderator roles can insert data</p> </li> <li> <p>Monitor Database Logs <pre><code>-- Check for database errors\nSELECT error_severity, event_message, timestamp\nFROM postgres_logs\nWHERE error_severity IN ('ERROR', 'FATAL')\nORDER BY timestamp DESC\nLIMIT 10;\n</code></pre></p> </li> </ol>"},{"location":"DATA_FLOW_GUIDE/#performance-optimization","title":"Performance Optimization","text":""},{"location":"DATA_FLOW_GUIDE/#device-optimization","title":"Device Optimization","text":"<ul> <li>Send data in batches when possible</li> <li>Use appropriate heartbeat intervals</li> <li>Implement exponential backoff for retries</li> <li>Compress protobuf messages</li> </ul>"},{"location":"DATA_FLOW_GUIDE/#server-optimization","title":"Server Optimization","text":"<ul> <li>Use async processing in Python server</li> <li>Batch database operations</li> <li>Implement connection pooling</li> <li>Monitor memory usage</li> </ul>"},{"location":"DATA_FLOW_GUIDE/#database-optimization","title":"Database Optimization","text":"<ul> <li>Index frequently queried columns</li> <li>Partition large tables by date</li> <li>Use appropriate data types</li> <li>Regular VACUUM and ANALYZE</li> </ul>"},{"location":"DEVELOPMENT_GUIDE/","title":"Development Guide: Changing Data Structures","text":""},{"location":"DEVELOPMENT_GUIDE/#overview","title":"Overview","text":"<p>This guide covers how to modify data structures in your IoT system, including device payloads, protobuf schemas, Python server processing, database tables, and frontend components.</p>"},{"location":"DEVELOPMENT_GUIDE/#when-you-need-to-make-changes","title":"When You Need to Make Changes","text":""},{"location":"DEVELOPMENT_GUIDE/#common-scenarios","title":"Common Scenarios","text":"<ol> <li>Adding new sensor types (e.g., air quality, pressure sensors)</li> <li>Modifying existing sensor data format (e.g., adding accuracy field to temperature)</li> <li>Adding device metadata (e.g., firmware version, location name)</li> <li>Changing location data structure (e.g., adding altitude, speed)</li> <li>Adding new device configuration options</li> </ol>"},{"location":"DEVELOPMENT_GUIDE/#step-by-step-change-process","title":"Step-by-Step Change Process","text":""},{"location":"DEVELOPMENT_GUIDE/#1-device-side-changes","title":"1. Device-Side Changes","text":"<p>A. Update Protobuf Schema <pre><code>// Protobuf/uplink.proto\nmessage Uplink {\n  uint32 uplink_count = 1;\n  Heartbeat heartbeat = 2;\n  Location location = 3;\n\n  // NEW: Add air quality data\n  AirQuality air_quality = 4;\n}\n\n// NEW: Define air quality message\nmessage AirQuality {\n  float pm25 = 1;\n  float pm10 = 2;\n  int32 co2_ppm = 3;\n  float temperature = 4;\n  float humidity = 5;\n}\n</code></pre></p> <p>B. Regenerate Protobuf Files <pre><code># Generate Python files\nprotoc --python_out=python-server/Protobuf uplink.proto downlink.proto\n\n# Generate files for your device platform (C++, Java, etc.)\nprotoc --cpp_out=device/src uplink.proto\nprotoc --java_out=device/src uplink.proto\n</code></pre></p> <p>C. Update Device Code <pre><code>// Device code example (C++)\nuplink.mutable_air_quality()-&gt;set_pm25(sensor_pm25);\nuplink.mutable_air_quality()-&gt;set_pm10(sensor_pm10);\nuplink.mutable_air_quality()-&gt;set_co2_ppm(sensor_co2);\n</code></pre></p>"},{"location":"DEVELOPMENT_GUIDE/#2-flyio-python-server-changes","title":"2. Fly.io Python Server Changes","text":"<p>A. Update Data Extraction <pre><code># python-server/main.py\nasync def render_post(self, request):\n    try:\n        uplink = uplink_pb2.Uplink()\n        uplink.ParseFromString(request.payload)\n\n        logger.info(f\"Received payload: {request.payload.hex()}\")\n\n        dev_id = None\n        uplink_count = uplink.uplink_count if uplink.uplink_count else None\n\n        # Extract device config\n        device_config = None\n        if uplink.HasField(\"heartbeat\") and uplink.heartbeat.HasField(\"config\"):\n            config = uplink.heartbeat.config\n            dev_id = config.devid\n            device_config = {\n                \"devid\": config.devid,\n                \"temperature\": config.temperature if config.temperature else None,\n                \"uplink_count\": uplink_count\n            }\n            logger.info(f\"Parsed DeviceConfig: devid: \\\"{config.devid}\\\" temperature: {config.temperature}\")\n\n        # Extract location data\n        location_data = None\n        if uplink.HasField(\"location\"):\n            location = uplink.location\n            location_data = {}\n\n            if location.wifi:\n                location_data[\"wifi\"] = [\n                    {\"mac\": ap.mac, \"rssi\": ap.rssi} \n                    for ap in location.wifi\n                ]\n\n            if location.cells:\n                location_data[\"cells\"] = [\n                    {\n                        \"mcc\": cell.mcc,\n                        \"mnc\": cell.mnc, \n                        \"lac\": cell.lac,\n                        \"cid\": cell.cid,\n                        \"rssi\": cell.rssi\n                    }\n                    for cell in location.cells\n                ]\n\n            if location.HasField(\"gnss\"):\n                gnss = location.gnss\n                location_data[\"gnss\"] = {\n                    \"latitude\": gnss.latitude,\n                    \"longitude\": gnss.longitude,\n                    \"accuracy\": gnss.accuracy\n                }\n\n        # NEW: Extract air quality data\n        air_quality_data = None\n        if uplink.HasField(\"air_quality\"):\n            aq = uplink.air_quality\n            air_quality_data = {\n                \"pm25\": aq.pm25,\n                \"pm10\": aq.pm10,\n                \"co2_ppm\": aq.co2_ppm,\n                \"temperature\": aq.temperature,\n                \"humidity\": aq.humidity\n            }\n\n        # Store to Supabase\n        await store_uplink_to_supabase({\n            \"devid\": dev_id,\n            \"uplink_count\": uplink_count,\n            \"device_config\": device_config,\n            \"location\": location_data,\n            \"air_quality\": air_quality_data  # NEW\n        })\n\n        logger.info(\"Successfully stored to Supabase\")\n        return aiocoap.Message(code=aiocoap.CHANGED, payload=b\"OK\")\n\n    except Exception as e:\n        logger.error(f\"Failed to parse or handle uplink: {e}\")\n        return aiocoap.Message(code=aiocoap.BAD_REQUEST, payload=b\"Error\")\n</code></pre></p> <p>B. Update Supabase Storage Function <pre><code># python-server/store_to_supabase.py\nimport json\nimport hmac\nimport hashlib\nimport aiohttp\nimport os\nfrom colorlog import getLogger\n\nlogger = getLogger(__name__)\n\nasync def store_uplink_to_supabase(data):\n    \"\"\"Store uplink data to Supabase via Edge Function\"\"\"\n\n    supabase_url = os.getenv('SUPABASE_URL', 'https://cdwtsrzshpotkfbyyyjk.supabase.co')\n    edge_function_url = f\"{supabase_url}/functions/v1/ingest-sensor-data\"\n    secret = os.getenv('FLY_INGEST_SECRET', 'your-secret-key')\n\n    try:\n        # Store device config if present\n        if data.get(\"device_config\"):\n            await send_to_supabase(data[\"device_config\"], \"device_config\", edge_function_url, secret)\n\n        # Store location data if present\n        if data.get(\"location\"):\n            payload = {\n                \"devid\": data[\"devid\"],\n                \"data_type\": \"location\",\n                \"data\": data[\"location\"],\n                \"uplink_count\": data.get(\"uplink_count\")\n            }\n            await send_to_supabase(payload, \"sensor_data\", edge_function_url, secret)\n\n        # NEW: Handle air quality data\n        if data.get(\"air_quality\"):\n            payload = {\n                \"devid\": data[\"devid\"],\n                \"data_type\": \"air_quality\",\n                \"data\": data[\"air_quality\"],\n                \"uplink_count\": data.get(\"uplink_count\")\n            }\n            await send_to_supabase(payload, \"sensor_data\", edge_function_url, secret)\n\n    except Exception as e:\n        logger.error(f\"Error storing to Supabase: {e}\")\n        raise\n\nasync def send_to_supabase(payload, data_type, url, secret):\n    \"\"\"Send data to Supabase Edge Function with HMAC signature\"\"\"\n\n    # Generate HMAC signature\n    payload_json = json.dumps(payload, sort_keys=True)\n    signature = hmac.new(\n        secret.encode(),\n        payload_json.encode(),\n        hashlib.sha256\n    ).hexdigest()\n\n    headers = {\n        'Content-Type': 'application/json',\n        'X-Signature': f'sha256={signature}'\n    }\n\n    async with aiohttp.ClientSession() as session:\n        async with session.post(url, data=payload_json, headers=headers) as response:\n            if response.status == 200:\n                logger.info(f\"Successfully sent {data_type} to Supabase\")\n            else:\n                error_text = await response.text()\n                logger.error(f\"Failed to send {data_type} to Supabase: {response.status} - {error_text}\")\n                raise Exception(f\"Supabase request failed: {response.status}\")\n</code></pre></p> <p>C. Deploy Updated Server <pre><code>cd python-server\nflyctl deploy -a your-app\n</code></pre></p>"},{"location":"DEVELOPMENT_GUIDE/#3-supabase-edge-function-changes","title":"3. Supabase Edge Function Changes","text":"<p>A. Update Edge Function <pre><code>// supabase/functions/ingest-sensor-data/index.ts\nimport { serve } from \"https://deno.land/std@0.168.0/http/server.ts\"\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2'\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type, x-signature',\n}\n\nserve(async (req) =&gt; {\n  if (req.method === 'OPTIONS') {\n    return new Response('ok', { headers: corsHeaders })\n  }\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\n    )\n\n    const body = await req.text()\n    const payload = JSON.parse(body)\n\n    // Verify HMAC signature\n    const signature = req.headers.get('X-Signature')\n    const secret = Deno.env.get('FLY_INGEST_SECRET')\n\n    if (!await verifyHMAC(signature, body, secret)) {\n      return new Response('Unauthorized', { status: 401, headers: corsHeaders })\n    }\n\n    console.log('HMAC signature verified successfully')\n\n    // Handle device config updates\n    if (payload.devid &amp;&amp; payload.temperature !== undefined) {\n      const { error: configError } = await supabaseClient\n        .from('device_config')\n        .upsert({\n          devid: payload.devid,\n          last_seen: new Date().toISOString(),\n          last_uplink_count: payload.uplink_count,\n          temperature: payload.temperature\n        })\n\n      if (configError) {\n        console.error('Error updating device config:', configError)\n      } else {\n        console.log(`Updated device config for ${payload.devid}`)\n      }\n    }\n\n    // Handle sensor data\n    if (payload.data_type &amp;&amp; payload.data) {\n      let processedData = payload.data\n\n      // Process location data with HERE API\n      if (payload.data_type === 'location' &amp;&amp; (payload.data.wifi || payload.data.cells)) {\n        try {\n          const hereApiKey = Deno.env.get('HERE_API_KEY')\n          if (hereApiKey) {\n            const locationResult = await getLocationFromHERE(payload.data, hereApiKey)\n            if (locationResult) {\n              processedData = {\n                ...payload.data,\n                latitude: locationResult.latitude,\n                longitude: locationResult.longitude,\n                accuracy: locationResult.accuracy,\n                source: 'here'\n              }\n              console.log(`HERE API returned location: ${locationResult.latitude}, ${locationResult.longitude}`)\n            }\n          }\n        } catch (error) {\n          console.error('HERE API error:', error)\n        }\n      }\n\n      // Store sensor data\n      const { error: sensorError } = await supabaseClient\n        .from('sensor_data')\n        .insert({\n          devid: payload.devid,\n          data_type: payload.data_type,\n          data: processedData,\n          uplink_count: payload.uplink_count\n        })\n\n      if (sensorError) {\n        console.error('Error storing sensor data:', sensorError)\n        return new Response('Database error', { status: 500, headers: corsHeaders })\n      }\n\n      console.log(`Stored sensor_data: ${payload.data_type} for device ${payload.devid}`)\n    }\n\n    // NEW: Handle air quality data\n    if (payload.data_type === 'air_quality' &amp;&amp; payload.data) {\n      const { error: airQualityError } = await supabaseClient\n        .from('sensor_data')\n        .insert({\n          devid: payload.devid,\n          data_type: 'air_quality',\n          data: payload.data,\n          uplink_count: payload.uplink_count\n        })\n\n      if (airQualityError) {\n        console.error('Error storing air quality data:', airQualityError)\n        return new Response('Database error', { status: 500, headers: corsHeaders })\n      }\n\n      console.log(`Stored air quality data for device ${payload.devid}`)\n    }\n\n    return new Response('OK', { headers: corsHeaders })\n\n  } catch (error) {\n    console.error('Error processing request:', error)\n    return new Response('Internal server error', { status: 500, headers: corsHeaders })\n  }\n})\n\nasync function verifyHMAC(signature: string | null, body: string, secret: string | undefined): Promise&lt;boolean&gt; {\n  if (!signature || !secret) {\n    return false\n  }\n\n  const expectedSignature = `sha256=${await crypto.subtle.digest('SHA-256', new TextEncoder().encode(secret + body)).then(buf =&gt; Array.from(new Uint8Array(buf)).map(b =&gt; b.toString(16).padStart(2, '0')).join(''))}`\n\n  return signature === expectedSignature\n}\n\nasync function getLocationFromHERE(locationData: any, apiKey: string) {\n  try {\n    const body: any = {}\n\n    if (locationData.wifi &amp;&amp; locationData.wifi.length &gt; 0) {\n      body.wlan = locationData.wifi.map((ap: any) =&gt; ({\n        mac: ap.mac,\n        rss: ap.rssi\n      }))\n    }\n\n    if (locationData.cells &amp;&amp; locationData.cells.length &gt; 0) {\n      body.lte = locationData.cells.map((cell: any) =&gt; ({\n        mcc: cell.mcc,\n        mnc: cell.mnc,\n        lac: cell.lac,\n        cid: cell.cid,\n        rss: cell.rssi\n      }))\n    }\n\n    const response = await fetch('https://positioning.hereapi.com/v2/locate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      },\n      body: JSON.stringify(body)\n    })\n\n    if (response.ok) {\n      const result = await response.json()\n      if (result.location) {\n        return {\n          latitude: result.location.lat,\n          longitude: result.location.lng,\n          accuracy: result.location.accuracy\n        }\n      }\n    }\n\n    return null\n  } catch (error) {\n    console.error('HERE API request failed:', error)\n    return null\n  }\n}\n</code></pre></p> <p>B. Deploy Edge Function Edge functions are deployed automatically when you save changes to the codebase.</p>"},{"location":"DEVELOPMENT_GUIDE/#4-database-schema-changes","title":"4. Database Schema Changes","text":"<p>A. Create Migration Use the Supabase migration tool to add new columns or tables:</p> <pre><code>-- Add new sensor data types to existing enum (if using enums)\nALTER TYPE sensor_data_type ADD VALUE 'air_quality';\n\n-- Or if using text field, no schema change needed\n-- The sensor_data table already supports flexible JSONB data\n\n-- Optionally add specific columns to device_config for frequently accessed data\nALTER TABLE device_config \nADD COLUMN air_quality_pm25 REAL,\nADD COLUMN air_quality_co2 INTEGER;\n</code></pre> <p>B. Update RLS Policies (if needed) <pre><code>-- Usually no changes needed as existing policies cover new data types\n-- But verify access controls work as expected\n</code></pre></p>"},{"location":"DEVELOPMENT_GUIDE/#5-frontend-changes","title":"5. Frontend Changes","text":"<p>A. Add New Data Type Handling <pre><code>// src/types/sensor.ts\nexport interface AirQualityData {\n  pm25: number;\n  pm10: number;\n  co2_ppm: number;\n  temperature: number;\n  humidity: number;\n}\n\nexport interface SensorData {\n  id: string;\n  devid: string;\n  data_type: string;\n  data: any;\n  uplink_count?: number;\n  created_at: string;\n  air_quality?: AirQualityData;\n}\n</code></pre></p> <p>B. Create New Components <pre><code>// src/components/AirQualityCard.tsx\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\n\ninterface AirQualityCardProps {\n  data: AirQualityData;\n  timestamp: string;\n}\n\nexport const AirQualityCard = ({ data, timestamp }: AirQualityCardProps) =&gt; {\n  return (\n    &lt;Card&gt;\n      &lt;CardHeader&gt;\n        &lt;CardTitle&gt;Air Quality&lt;/CardTitle&gt;\n      &lt;/CardHeader&gt;\n      &lt;CardContent&gt;\n        &lt;div className=\"grid grid-cols-2 gap-4\"&gt;\n          &lt;div&gt;\n            &lt;p className=\"text-sm text-muted-foreground\"&gt;PM2.5&lt;/p&gt;\n            &lt;p className=\"text-2xl font-bold\"&gt;{data.pm25} \u03bcg/m\u00b3&lt;/p&gt;\n          &lt;/div&gt;\n          &lt;div&gt;\n            &lt;p className=\"text-sm text-muted-foreground\"&gt;CO2&lt;/p&gt;\n            &lt;p className=\"text-2xl font-bold\"&gt;{data.co2_ppm} ppm&lt;/p&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/CardContent&gt;\n    &lt;/Card&gt;\n  );\n};\n</code></pre></p> <p>C. Update Dashboard Components <pre><code>// src/components/DeviceList.tsx\nimport { useState, useEffect } from 'react';\nimport { supabase } from '@/lib/supabase';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { LocationCard } from './LocationCard';\nimport { SoilDataCard } from './SoilDataCard';\nimport { AirQualityCard } from './AirQualityCard';\nimport { GenericSensorCard } from './GenericSensorCard';\n\ninterface DeviceListProps {\n  searchTerm: string;\n}\n\nexport const DeviceList = ({ searchTerm }: DeviceListProps) =&gt; {\n  const [devices, setDevices] = useState&lt;any[]&gt;([]);\n  const [sensorData, setSensorData] = useState&lt;any[]&gt;([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() =&gt; {\n    fetchDevices();\n    fetchSensorData();\n\n    const subscription = supabase\n      .channel('device-updates')\n      .on('postgres_changes', {\n        event: '*',\n        schema: 'public',\n        table: 'device_config'\n      }, () =&gt; {\n        fetchDevices();\n      })\n      .on('postgres_changes', {\n        event: 'INSERT',\n        schema: 'public',\n        table: 'sensor_data'\n      }, () =&gt; {\n        fetchSensorData();\n      })\n      .subscribe();\n\n    return () =&gt; {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  const fetchDevices = async () =&gt; {\n    const { data, error } = await supabase\n      .from('device_config')\n      .select('*')\n      .order('last_seen', { ascending: false });\n\n    if (error) {\n      console.error('Error fetching devices:', error);\n    } else {\n      setDevices(data || []);\n    }\n    setLoading(false);\n  };\n\n  const fetchSensorData = async () =&gt; {\n    const { data, error } = await supabase\n      .from('sensor_data')\n      .select('*')\n      .order('created_at', { ascending: false })\n      .limit(100);\n\n    if (error) {\n      console.error('Error fetching sensor data:', error);\n    } else {\n      setSensorData(data || []);\n    }\n  };\n\n  const renderSensorData = (sensorData: any) =&gt; {\n    switch (sensorData.data_type) {\n      case 'location':\n        return &lt;LocationCard data={sensorData.data} timestamp={sensorData.created_at} /&gt;;\n      case 'soil_data':\n        return &lt;SoilDataCard data={sensorData.data} timestamp={sensorData.created_at} /&gt;;\n      case 'air_quality':  // NEW\n        return &lt;AirQualityCard data={sensorData.data} timestamp={sensorData.created_at} /&gt;;\n      default:\n        return &lt;GenericSensorCard data={sensorData} /&gt;;\n    }\n  };\n\n  const filteredDevices = devices.filter(device =&gt;\n    device.devid.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  if (loading) {\n    return &lt;div&gt;Loading devices...&lt;/div&gt;;\n  }\n\n  return (\n    &lt;div className=\"space-y-4\"&gt;\n      {filteredDevices.map((device) =&gt; (\n        &lt;Card key={device.devid}&gt;\n          &lt;CardHeader&gt;\n            &lt;div className=\"flex justify-between items-center\"&gt;\n              &lt;CardTitle&gt;{device.devid}&lt;/CardTitle&gt;\n              &lt;Badge variant={device.last_seen &gt; new Date(Date.now() - 24*60*60*1000).toISOString() ? \"default\" : \"secondary\"}&gt;\n                {device.last_seen &gt; new Date(Date.now() - 24*60*60*1000).toISOString() ? \"Online\" : \"Offline\"}\n              &lt;/Badge&gt;\n            &lt;/div&gt;\n          &lt;/CardHeader&gt;\n          &lt;CardContent&gt;\n            &lt;div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\"&gt;\n              &lt;div&gt;\n                &lt;p className=\"text-sm text-muted-foreground\"&gt;Last Seen&lt;/p&gt;\n                &lt;p className=\"font-medium\"&gt;{new Date(device.last_seen).toLocaleString()}&lt;/p&gt;\n              &lt;/div&gt;\n              &lt;div&gt;\n                &lt;p className=\"text-sm text-muted-foreground\"&gt;Uplink Count&lt;/p&gt;\n                &lt;p className=\"font-medium\"&gt;{device.last_uplink_count || 'N/A'}&lt;/p&gt;\n              &lt;/div&gt;\n              {device.temperature &amp;&amp; (\n                &lt;div&gt;\n                  &lt;p className=\"text-sm text-muted-foreground\"&gt;Temperature&lt;/p&gt;\n                  &lt;p className=\"font-medium\"&gt;{device.temperature}\u00b0C&lt;/p&gt;\n                &lt;/div&gt;\n              )}\n            &lt;/div&gt;\n\n            &lt;div className=\"mt-4\"&gt;\n              &lt;h4 className=\"font-medium mb-2\"&gt;Recent Sensor Data&lt;/h4&gt;\n              &lt;div className=\"space-y-2\"&gt;\n                {sensorData\n                  .filter(data =&gt; data.devid === device.devid)\n                  .slice(0, 3)\n                  .map((data, index) =&gt; (\n                    &lt;div key={index}&gt;\n                      {renderSensorData(data)}\n                    &lt;/div&gt;\n                  ))}\n              &lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/CardContent&gt;\n        &lt;/Card&gt;\n      ))}\n    &lt;/div&gt;\n  );\n};\n</code></pre></p>"},{"location":"DEVELOPMENT_GUIDE/#testing-your-changes","title":"Testing Your Changes","text":""},{"location":"DEVELOPMENT_GUIDE/#1-local-testing","title":"1. Local Testing","text":"<p>A. Test Protobuf Changes <pre><code># Test script\nimport uplink_pb2\n\n# Create test message\nuplink = uplink_pb2.Uplink()\nuplink.uplink_count = 123\nuplink.air_quality.pm25 = 15.5\nuplink.air_quality.co2_ppm = 400\n\n# Serialize and test\npayload = uplink.SerializeToString()\nprint(f\"Payload size: {len(payload)} bytes\")\n</code></pre></p> <p>B. Test Python Server Locally <pre><code>cd python-server\npython main.py\n# Test with sample CoAP messages\n</code></pre></p> <p>C. Test Edge Function Locally <pre><code># Use Supabase CLI\nsupabase functions serve ingest-sensor-data\n\n# Test with curl\ncurl -X POST http://localhost:54321/functions/v1/ingest-sensor-data \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"devid\":\"test\",\"air_quality\":{\"pm25\":15.5,\"co2_ppm\":400}}'\n</code></pre></p>"},{"location":"DEVELOPMENT_GUIDE/#2-staging-environment","title":"2. Staging Environment","text":"<p>A. Deploy to Staging Fly.io App <pre><code>flyctl deploy -a your-app-staging\n</code></pre></p> <p>B. Test with Real Device - Configure device to send to staging server - Monitor logs for successful processing - Verify data appears in database</p>"},{"location":"DEVELOPMENT_GUIDE/#3-production-deployment","title":"3. Production Deployment","text":"<p>A. Deploy in Order 1. Database changes first (via migration tool) 2. Edge function changes (automatic) 3. Fly.io server updates 4. Frontend updates 5. Device firmware updates (last)</p>"},{"location":"DEVELOPMENT_GUIDE/#handling-breaking-changes","title":"Handling Breaking Changes","text":""},{"location":"DEVELOPMENT_GUIDE/#backward-compatibility-strategies","title":"Backward Compatibility Strategies","text":"<p>1. Versioned Protobuf Fields <pre><code>message Uplink {\n  uint32 uplink_count = 1;\n\n  // Legacy fields (keep for compatibility)\n  float temperature = 2 [deprecated = true];\n\n  // New structured data\n  SensorReading sensor_data = 3;\n}\n</code></pre></p> <p>2. Gradual Migration <pre><code># Support both old and new formats\nif uplink.HasField(\"temperature\"):  # Legacy\n    temperature = uplink.temperature\nelif uplink.HasField(\"sensor_data\"):  # New format\n    temperature = uplink.sensor_data.temperature\n</code></pre></p> <p>3. Database Migration Strategy <pre><code>-- Add new columns without removing old ones\nALTER TABLE sensor_data \nADD COLUMN data_v2 JSONB;\n\n-- Migrate data gradually\nUPDATE sensor_data \nSET data_v2 = migrate_data_format(data)\nWHERE data_v2 IS NULL;\n</code></pre></p>"},{"location":"DEVELOPMENT_GUIDE/#monitoring-changes","title":"Monitoring Changes","text":""},{"location":"DEVELOPMENT_GUIDE/#1-deployment-monitoring","title":"1. Deployment Monitoring","text":"<pre><code># Monitor Fly.io deployment\nflyctl logs -a your-app | grep -E \"(ERROR|SUCCESS|DEPLOYED)\"\n\n# Check Edge Function logs\n# View in Supabase dashboard\n</code></pre>"},{"location":"DEVELOPMENT_GUIDE/#2-data-quality-checks","title":"2. Data Quality Checks","text":"<pre><code>-- Verify new data is being received\nSELECT \n  data_type, \n  COUNT(*) as count,\n  MIN(created_at) as first_seen,\n  MAX(created_at) as last_seen\nFROM sensor_data \nWHERE created_at &gt; NOW() - INTERVAL '1 hour'\nGROUP BY data_type;\n\n-- Check for parsing errors\nSELECT devid, data, created_at\nFROM sensor_data \nWHERE data_type = 'air_quality'\nAND data IS NULL\nORDER BY created_at DESC;\n</code></pre>"},{"location":"DEVELOPMENT_GUIDE/#3-device-health-monitoring","title":"3. Device Health Monitoring","text":"<pre><code>-- Monitor devices sending new data format\nSELECT \n  devid,\n  COUNT(*) as message_count,\n  COUNT(CASE WHEN data_type = 'air_quality' THEN 1 END) as air_quality_count\nFROM sensor_data \nWHERE created_at &gt; NOW() - INTERVAL '24 hours'\nGROUP BY devid\nORDER BY message_count DESC;\n</code></pre>"},{"location":"DEVELOPMENT_GUIDE/#rollback-procedures","title":"Rollback Procedures","text":""},{"location":"DEVELOPMENT_GUIDE/#1-quick-rollback","title":"1. Quick Rollback","text":"<pre><code># Rollback Fly.io deployment\nflyctl releases rollback -a your-app\n\n# Rollback database changes (if needed)\n# Use Supabase dashboard to revert migration\n</code></pre>"},{"location":"DEVELOPMENT_GUIDE/#2-data-recovery","title":"2. Data Recovery","text":"<pre><code>-- If data corruption occurs, restore from backup\n-- Supabase handles automatic backups\n\n-- Manual data cleanup if needed\nDELETE FROM sensor_data \nWHERE data_type = 'air_quality' \nAND created_at &gt; '2024-01-20 14:00:00';\n</code></pre>"},{"location":"DEVELOPMENT_GUIDE/#best-practices","title":"Best Practices","text":""},{"location":"DEVELOPMENT_GUIDE/#1-version-control","title":"1. Version Control","text":"<ul> <li>Tag releases with semantic versioning</li> <li>Keep protobuf schemas in version control</li> <li>Document breaking changes in CHANGELOG.md</li> </ul>"},{"location":"DEVELOPMENT_GUIDE/#2-testing","title":"2. Testing","text":"<ul> <li>Always test changes in staging first</li> <li>Use automated tests for critical paths</li> <li>Monitor error rates after deployment</li> </ul>"},{"location":"DEVELOPMENT_GUIDE/#3-documentation","title":"3. Documentation","text":"<ul> <li>Update API documentation</li> <li>Add examples for new data types</li> <li>Document migration procedures</li> </ul>"},{"location":"DEVELOPMENT_GUIDE/#4-communication","title":"4. Communication","text":"<ul> <li>Notify device operators of changes</li> <li>Provide migration timelines</li> <li>Maintain backward compatibility when possible</li> </ul>"},{"location":"DEVELOPMENT_GUIDE/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"DEVELOPMENT_GUIDE/#1-protobuf-field-numbers","title":"1. Protobuf Field Numbers","text":"<pre><code>// \u274c DON'T reuse field numbers\nmessage Uplink {\n  uint32 uplink_count = 1;\n  // Don't reuse number 2 if it was used before\n  AirQuality air_quality = 3;  // Skip to 3\n}\n</code></pre>"},{"location":"DEVELOPMENT_GUIDE/#2-database-migration-order","title":"2. Database Migration Order","text":"<pre><code>-- \u274c Wrong order - add column first\nALTER TABLE sensor_data DROP COLUMN old_field;\nALTER TABLE sensor_data ADD COLUMN new_field TEXT;\n\n-- \u2705 Correct order - add first, migrate, then drop\nALTER TABLE sensor_data ADD COLUMN new_field TEXT;\n-- Deploy code changes\n-- Migrate data\n-- Then optionally drop old column\n</code></pre>"},{"location":"DEVELOPMENT_GUIDE/#3-hmac-signature-changes","title":"3. HMAC Signature Changes","text":"<pre><code># \u274c Don't change payload structure without updating HMAC\n# Both Fly.io and Edge Function must use same structure\n</code></pre>"},{"location":"DEVELOPMENT_GUIDE/#4-edge-function-timeouts","title":"4. Edge Function Timeouts","text":"<pre><code>// \u2705 Handle timeouts for external API calls\nconst response = await fetch(url, {\n  signal: AbortSignal.timeout(5000)  // 5 second timeout\n});\n</code></pre> <p>This guide ensures smooth evolution of your IoT data pipeline while maintaining system reliability and data integrity.</p>"},{"location":"FLYIO_SETUP/","title":"Fly.io Server Setup &amp; Deployment Guide","text":""},{"location":"FLYIO_SETUP/#overview","title":"Overview","text":"<p>Fly.io hosts your Python CoAP server that acts as a bridge between IoT devices and Supabase. This guide covers setup, deployment, monitoring, and troubleshooting.</p>"},{"location":"FLYIO_SETUP/#what-is-flyio","title":"What is Fly.io?","text":"<p>Fly.io is a cloud platform that runs your applications close to users worldwide. In your IoT system, it: - Hosts the Python CoAP server - Receives UDP/CoAP messages from IoT devices - Processes protobuf data - Forwards data securely to Supabase Edge Functions - Handles HMAC signature generation for security</p>"},{"location":"FLYIO_SETUP/#initial-setup","title":"Initial Setup","text":""},{"location":"FLYIO_SETUP/#1-install-flyio-cli","title":"1. Install Fly.io CLI","text":"<pre><code># macOS\nbrew install flyctl\n\n# Linux/Windows\ncurl -L https://fly.io/install.sh | sh\n</code></pre>"},{"location":"FLYIO_SETUP/#2-login-to-flyio","title":"2. Login to Fly.io","text":"<pre><code>flyctl auth login\n</code></pre>"},{"location":"FLYIO_SETUP/#3-create-flyio-app-if-not-already-done","title":"3. Create Fly.io App (if not already done)","text":"<pre><code>cd python-server\nflyctl launch\n</code></pre> <p>This creates: - <code>fly.toml</code> configuration file - App name (e.g., <code>your-iot-app</code>) - Initial deployment</p>"},{"location":"FLYIO_SETUP/#4-set-environment-variables","title":"4. Set Environment Variables","text":"<pre><code># Set the secret used for HMAC signing\nflyctl secrets set FLY_INGEST_SECRET=\"your-secret-here\"\n\n# Set Supabase connection details\nflyctl secrets set SUPABASE_URL=\"https://cdwtsrzshpotkfbyyyjk.supabase.co\"\nflyctl secrets set SUPABASE_ANON_KEY=\"your-anon-key\"\n</code></pre>"},{"location":"FLYIO_SETUP/#deployment","title":"Deployment","text":""},{"location":"FLYIO_SETUP/#deploy-your-python-server","title":"Deploy Your Python Server","text":"<pre><code>cd python-server\nflyctl deploy\n</code></pre> <p>This will: 1. Build your Python application 2. Deploy to Fly.io infrastructure 3. Start the CoAP server on port 5683 4. Make it accessible at <code>your-app.fly.dev:5683</code></p>"},{"location":"FLYIO_SETUP/#verify-deployment","title":"Verify Deployment","text":"<pre><code># Check app status\nflyctl status\n\n# View logs\nflyctl logs\n\n# Check if CoAP port is accessible\nnc -u your-app.fly.dev 5683\n</code></pre>"},{"location":"FLYIO_SETUP/#configuration-files","title":"Configuration Files","text":""},{"location":"FLYIO_SETUP/#flytoml","title":"fly.toml","text":"<pre><code>app = \"your-iot-app\"\nprimary_region = \"iad\"\n\n[build]\n\n[http_service]\n  internal_port = 8080\n  force_https = true\n  auto_stop_machines = true\n  auto_start_machines = true\n  min_machines_running = 1\n\n[[services]]\n  protocol = \"udp\"\n  internal_port = 5683\n\n  [[services.ports]]\n    port = 5683\n\n[env]\n  PORT = \"8080\"\n</code></pre>"},{"location":"FLYIO_SETUP/#dockerfile-if-using-docker","title":"Dockerfile (if using Docker)","text":"<pre><code>FROM python:3.11-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY . .\n\nEXPOSE 5683/udp\n\nCMD [\"python\", \"main.py\"]\n</code></pre>"},{"location":"FLYIO_SETUP/#monitoring-logging","title":"Monitoring &amp; Logging","text":""},{"location":"FLYIO_SETUP/#view-real-time-logs","title":"View Real-time Logs","text":"<pre><code># Follow logs in real-time\nflyctl logs -a your-app\n\n# Filter logs\nflyctl logs -a your-app | grep \"ERROR\"\nflyctl logs -a your-app | grep \"Received payload\"\n</code></pre>"},{"location":"FLYIO_SETUP/#check-application-metrics","title":"Check Application Metrics","text":"<pre><code># App status and health\nflyctl status -a your-app\n\n# Scale information\nflyctl scale show -a your-app\n\n# Machine information\nflyctl machines list -a your-app\n</code></pre>"},{"location":"FLYIO_SETUP/#log-examples","title":"Log Examples","text":"<p>Your Python server logs will show: <pre><code>[14:30:25] INFO - CoAP server running on coap://0.0.0.0:5683/uplink\n[14:30:45] INFO - Received payload: a1b2c3d4e5f6...\n[14:30:45] INFO - Parsed DeviceConfig: devid: \"soil_001\" temperature: 23.5\n[14:30:45] INFO - Successfully stored to Supabase\n</code></pre></p>"},{"location":"FLYIO_SETUP/#troubleshooting","title":"Troubleshooting","text":""},{"location":"FLYIO_SETUP/#common-issues","title":"Common Issues","text":"<p>1. CoAP Port Not Accessible <pre><code># Check if UDP port 5683 is properly configured\nflyctl status -a your-app\n\n# Verify fly.toml has UDP service configured\n# Add this to fly.toml if missing:\n[[services]]\n  protocol = \"udp\"\n  internal_port = 5683\n  [[services.ports]]\n    port = 5683\n</code></pre></p> <p>2. Environment Variables Not Set <pre><code># List current secrets\nflyctl secrets list -a your-app\n\n# Set missing secrets\nflyctl secrets set FLY_INGEST_SECRET=\"your-secret\" -a your-app\n</code></pre></p> <p>3. Python Dependencies Issues <pre><code># Check if requirements.txt is complete\ncat requirements.txt\n\n# Common dependencies needed:\n# aiocoap\n# colorlog\n# supabase\n# protobuf\n</code></pre></p> <p>4. Memory/Resource Issues <pre><code># Scale up if needed\nflyctl scale memory 512 -a your-app\nflyctl scale count 2 -a your-app\n</code></pre></p>"},{"location":"FLYIO_SETUP/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging in your Python server: <pre><code># In main.py, set logging level to DEBUG\nlogger.setLevel(logging.DEBUG)\n</code></pre></p>"},{"location":"FLYIO_SETUP/#security-considerations","title":"Security Considerations","text":""},{"location":"FLYIO_SETUP/#hmac-secret-management","title":"HMAC Secret Management","text":"<ul> <li>Never hardcode secrets in your code</li> <li>Use <code>flyctl secrets set</code> to manage sensitive data</li> <li>Rotate secrets periodically</li> <li>Use different secrets for development/production</li> </ul>"},{"location":"FLYIO_SETUP/#network-security","title":"Network Security","text":"<ul> <li>CoAP traffic is unencrypted (by design for IoT)</li> <li>Security is handled via HMAC signatures</li> <li>All HTTP traffic to Supabase uses HTTPS/TLS</li> </ul>"},{"location":"FLYIO_SETUP/#scaling-performance","title":"Scaling &amp; Performance","text":""},{"location":"FLYIO_SETUP/#auto-scaling-configuration","title":"Auto-scaling Configuration","text":"<pre><code># In fly.toml\n[http_service]\n  auto_stop_machines = true\n  auto_start_machines = true\n  min_machines_running = 1\n  max_machines_running = 5\n</code></pre>"},{"location":"FLYIO_SETUP/#regional-deployment","title":"Regional Deployment","text":"<pre><code># Deploy to multiple regions for better latency\nflyctl regions add lhr sea -a your-app\nflyctl regions remove iad -a your-app\n</code></pre>"},{"location":"FLYIO_SETUP/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code># Check resource usage\nflyctl metrics -a your-app\n\n# View machine performance\nflyctl machines list -a your-app\n</code></pre>"},{"location":"FLYIO_SETUP/#update-maintenance","title":"Update &amp; Maintenance","text":""},{"location":"FLYIO_SETUP/#regular-updates","title":"Regular Updates","text":"<ol> <li>Update Python dependencies</li> <li>Test locally first</li> <li>Deploy with <code>flyctl deploy</code></li> <li>Monitor logs for issues</li> <li>Rollback if needed: <code>flyctl releases rollback</code></li> </ol>"},{"location":"FLYIO_SETUP/#backup-strategy","title":"Backup Strategy","text":"<ul> <li>Your code is in version control</li> <li>Fly.io handles infrastructure backups</li> <li>Database backups are handled by Supabase</li> <li>Keep your <code>fly.toml</code> and deployment scripts in git</li> </ul>"},{"location":"FLYIO_SETUP/#cost-optimization","title":"Cost Optimization","text":""},{"location":"FLYIO_SETUP/#resource-management","title":"Resource Management","text":"<pre><code># Check current usage and costs\nflyctl scale show -a your-app\n\n# Optimize for cost (small IoT workloads)\nflyctl scale memory 256 -a your-app\nflyctl scale count 1 -a your-app\n</code></pre>"},{"location":"FLYIO_SETUP/#sleep-policies","title":"Sleep Policies","text":"<pre><code># In fly.toml - machines sleep when idle\n[http_service]\n  auto_stop_machines = true\n  min_machines_running = 0  # Allow sleeping when idle\n</code></pre> <p>This saves costs when devices aren't actively sending data.</p>"},{"location":"SYSTEM_ARCHITECTURE/","title":"IoT Device Management System - Architecture &amp; Security","text":""},{"location":"SYSTEM_ARCHITECTURE/#overview","title":"Overview","text":"<p>This system handles IoT device data ingestion, processing, and real-time monitoring through multiple channels with robust security mechanisms.</p>"},{"location":"SYSTEM_ARCHITECTURE/#system-architecture","title":"System Architecture","text":""},{"location":"SYSTEM_ARCHITECTURE/#system-architecture-diagram","title":"System Architecture Diagram","text":"<pre><code>flowchart TD\n    A[IoT Device] --&gt;|CoAP/UDP| B[Fly.io Server]\n    B --&gt;|HTTP/HTTPS + HMAC| C[Supabase Edge Function&lt;br/&gt;ingest-sensor-data]\n\n    C --&gt; D{Data Type}\n    D --&gt;|Location Data| E[HERE Positioning API]\n    D --&gt;|Other Sensors| F[Direct Processing]\n\n    E --&gt; G[Supabase Database]\n    F --&gt; G\n\n    G --&gt; H[Real-time Updates&lt;br/&gt;WebSocket Subscriptions]\n    H --&gt; I[Frontend Dashboard]\n\n    G --&gt; J[(Tables)]\n    J --&gt; K[device_config]\n    J --&gt; L[sensor_data]\n    J --&gt; M[activity]\n    J --&gt; N[reboot]\n\n    I --&gt; O[Device List &amp; Filters]\n    I --&gt; P[Interactive Map]\n    I --&gt; Q[Real-time Monitoring]\n    I --&gt; R[User Management]</code></pre>"},{"location":"SYSTEM_ARCHITECTURE/#data-flow-sequence","title":"Data Flow Sequence","text":"<pre><code>sequenceDiagram\n    participant Device as IoT Device\n    participant Fly as Fly.io Server\n    participant Edge as Edge Function\n    participant HERE as HERE API\n    participant DB as Supabase DB\n    participant UI as Frontend\n\n    Note over Device, UI: Location Data Flow\n    Device-&gt;&gt;Fly: CoAP/UDP: location payload\n    Fly-&gt;&gt;Edge: POST /ingest-sensor-data&lt;br/&gt;+ HMAC signature\n    Edge-&gt;&gt;Edge: Verify HMAC\n\n    alt WiFi/Cell Data Available\n        Edge-&gt;&gt;HERE: Position request\n        HERE--&gt;&gt;Edge: Coordinates + accuracy\n    else GNSS Data Only\n        Edge-&gt;&gt;HERE: Process raw GNSS\n        HERE--&gt;&gt;Edge: Calculated position\n    end\n\n    Edge-&gt;&gt;DB: INSERT sensor_data&lt;br/&gt;type: location\n    DB--&gt;&gt;UI: Real-time update\n    UI-&gt;&gt;UI: Update map markers\n\n    Note over Device, UI: Other Sensor Data Flow  \n    Device-&gt;&gt;Fly: CoAP/UDP: soil sensor payload&lt;br/&gt;(temp, humidity, NPK, pH, etc.)\n    Fly-&gt;&gt;Edge: POST /ingest-sensor-data&lt;br/&gt;+ HMAC signature\n    Edge-&gt;&gt;Edge: Verify HMAC\n    Edge-&gt;&gt;DB: INSERT sensor_data&lt;br/&gt;type: soil_data&lt;br/&gt;data: {temp, humidity, npk, ph}\n    DB--&gt;&gt;UI: Real-time updates\n    UI-&gt;&gt;UI: Update dashboards</code></pre>"},{"location":"SYSTEM_ARCHITECTURE/#security-architecture","title":"Security Architecture","text":""},{"location":"SYSTEM_ARCHITECTURE/#1-hmac-hash-based-message-authentication-code","title":"1. HMAC (Hash-based Message Authentication Code)","text":"<p>What is HMAC? - HMAC is a cryptographic mechanism that provides both data integrity and authenticity - It combines a secret key with the message content to create a unique signature - Uses SHA-256 hashing algorithm in our implementation</p> <p>How it works in our system:</p> <pre><code>// Signature Generation (Client/Device side)\nconst secret = \"FLY_INGEST_SECRET\"\nconst messageBody = JSON.stringify(payload)\nconst signature = hmac_sha256(secret, messageBody)\nconst hexSignature = signature.toString('hex')\n\n// HTTP Header\nX-Signature: sha256=${hexSignature}\n</code></pre> <p>Verification Process: 1. Client calculates HMAC-SHA256 of the request body using shared secret 2. Client sends the signature in the <code>X-Signature</code> header 3. Server receives the request and extracts the signature 4. Server recalculates HMAC-SHA256 of the received body using the same secret 5. Server compares calculated signature with received signature 6. Request is accepted only if signatures match exactly</p>"},{"location":"SYSTEM_ARCHITECTURE/#2-x-signature-header-format","title":"2. X-Signature Header Format","text":"<pre><code>X-Signature: sha256=&lt;hex_encoded_hmac_sha256_signature&gt;\n</code></pre> <p>Example: <pre><code>X-Signature: sha256=a3d2c1b4e5f6789abc123def456789abc123def456789abc123def456789abc123\n</code></pre></p>"},{"location":"SYSTEM_ARCHITECTURE/#3-security-layers","title":"3. Security Layers","text":""},{"location":"SYSTEM_ARCHITECTURE/#layer-1-network-security","title":"Layer 1: Network Security","text":"<ul> <li>HTTPS/TLS: All HTTP communications are encrypted</li> <li>HMAC Verification: Prevents tampering and unauthorized requests</li> <li>Content-Type Validation: Only accepts <code>application/json</code></li> </ul>"},{"location":"SYSTEM_ARCHITECTURE/#layer-2-authentication-authorization","title":"Layer 2: Authentication &amp; Authorization","text":"<ul> <li>JWT Tokens: User authentication via Supabase Auth</li> <li>Row Level Security (RLS): Database-level access control</li> <li>Role-based Access: Admin, Moderator, User roles with different permissions</li> </ul>"},{"location":"SYSTEM_ARCHITECTURE/#layer-3-data-validation","title":"Layer 3: Data Validation","text":"<ul> <li>Schema Validation: JSON payloads validated against expected structure</li> <li>Input Sanitization: All inputs cleaned and validated</li> <li>Rate Limiting: Built-in Supabase edge function rate limiting</li> </ul>"},{"location":"SYSTEM_ARCHITECTURE/#step-by-step-workflows","title":"Step-by-Step Workflows","text":""},{"location":"SYSTEM_ARCHITECTURE/#workflow-1-sensor-data-ingestion-via-flyio-edge-function","title":"Workflow 1: Sensor Data Ingestion (via Fly.io \u2192 Edge Function)","text":""},{"location":"SYSTEM_ARCHITECTURE/#prerequisites","title":"Prerequisites","text":"<ul> <li>Device configured to send CoAP messages to Fly.io</li> <li>Fly.io configured with shared secret (<code>FLY_INGEST_SECRET</code>)</li> <li>HERE API key configured in Supabase secrets (for location data)</li> </ul>"},{"location":"SYSTEM_ARCHITECTURE/#step-by-step-process","title":"Step-by-Step Process","text":"<ol> <li> <p>Device Sends CoAP Message <pre><code>const payload = {\n  devid: \"device_001\",\n  wifi: [\n    { mac: \"AA:BB:CC:DD:EE:FF\", rssi: -45 },\n    { mac: \"11:22:33:44:55:66\", rssi: -67 }\n  ],\n  cells: [\n    { mcc: 310, mnc: 410, lac: 12345, cid: 67890, rssi: -78 }\n  ],\n  gnss: {\n    raw_satellite_data: \"...\", // Raw GNSS measurements\n    timestamp: 1234567890\n  }\n}\n</code></pre></p> </li> <li> <p>Generate HMAC Signature <pre><code># Using openssl (example)\necho -n '{\"devid\":\"device_001\",...}' | openssl dgst -sha256 -hmac \"your_secret_here\"\n</code></pre></p> </li> <li> <p>Fly.io Forwards to Edge Function <pre><code># Fly.io automatically forwards to Supabase Edge Function\ncurl -X POST https://cdwtsrzshpotkfbyyyjk.supabase.co/functions/v1/ingest-sensor-data \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Signature: sha256=calculated_signature_here\" \\\n  -d '{\"devid\":\"device_001\",\"wifi\":[...],\"cells\":[...]}'\n</code></pre></p> </li> <li> <p>Edge Function Processing</p> </li> <li>Verify HMAC signature</li> <li>Extract device ID and sensor data</li> <li> <p>Determine positioning method:</p> <ul> <li>WiFi/Cell available: Call HERE Positioning API</li> <li>GNSS only: Process raw satellite data via HERE</li> <li>No location data: Skip positioning</li> </ul> </li> <li> <p>HERE API Integration <pre><code>// WiFi/Cell positioning\nconst response = await fetch('https://positioning.hereapi.com/v2/locate', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    wlan: formattedWifiData,\n    gsm: formattedCellData\n  })\n})\n\n// GNSS processing (if raw satellite data available)\nconst response = await fetch('https://positioning.hereapi.com/v2/gnss', {\n  method: 'POST',\n  body: gnssRawData\n})\n</code></pre></p> </li> <li> <p>Database Storage <pre><code>INSERT INTO sensor_data (devid, data_type, data, uplink_count)\nVALUES (\n  'device_001',\n  'location',\n  '{\"lat\": 37.7749, \"lng\": -122.4194, \"accuracy\": 10, \"source\": \"here\"}',\n  123\n)\n</code></pre></p> </li> <li> <p>Real-time Notification</p> </li> <li>Supabase automatically notifies subscribed clients</li> <li>Frontend receives real-time update</li> <li>Map markers updated immediately</li> </ol>"},{"location":"SYSTEM_ARCHITECTURE/#updated-sequence-diagrams","title":"Updated Sequence Diagrams","text":""},{"location":"SYSTEM_ARCHITECTURE/#sensor-data-flow-via-flyio","title":"Sensor Data Flow (via Fly.io)","text":"<pre><code>sequenceDiagram\n    participant Device\n    participant Fly as Fly.io Server\n    participant EdgeFunc as Edge Function\n    participant HERE as HERE Positioning API\n    participant DB as Supabase Database\n    participant Frontend\n\n    Note over Device, Frontend: Geolocation Data Flow\n    Device-&gt;&gt;Fly: CoAP/UDP: {wifi: [...], cells: [...], gnss: {raw satellite data}}\n    Fly-&gt;&gt;EdgeFunc: POST /ingest-sensor-data&lt;br/&gt;{wifi: [...], cells: [...], gnss: {raw satellite data}}\n    EdgeFunc-&gt;&gt;EdgeFunc: Verify HMAC signature\n\n    alt Has WiFi/Cell data\n        EdgeFunc-&gt;&gt;HERE: Request position with WiFi/Cell data\n        HERE--&gt;&gt;EdgeFunc: {lat, lng, accuracy, source: \"here\"}\n    else Has raw GNSS data only\n        EdgeFunc-&gt;&gt;HERE: Process raw GNSS satellite data\n        HERE--&gt;&gt;EdgeFunc: {lat, lng, accuracy, source: \"gnss\"}\n    end\n\n    EdgeFunc-&gt;&gt;DB: INSERT sensor_data&lt;br/&gt;{data_type: \"location\", data: {lat, lng, accuracy, source}}\n    DB--&gt;&gt;Frontend: Real-time notification\n    Frontend-&gt;&gt;Frontend: Update map markers\n\n    Note over Device, Frontend: Other Sensor Data Flow\n    Device-&gt;&gt;Fly: CoAP/UDP: {temperature: 23.5, soil_humidity: 65.2}\n    Fly-&gt;&gt;EdgeFunc: POST /ingest-sensor-data&lt;br/&gt;{temperature: 23.5, soil_humidity: 65.2}\n    EdgeFunc-&gt;&gt;EdgeFunc: Verify HMAC signature\n    EdgeFunc-&gt;&gt;DB: INSERT sensor_data&lt;br/&gt;{data_type: \"temperature\", data: {value: 23.5, unit: \"celsius\"}}\n    EdgeFunc-&gt;&gt;DB: INSERT sensor_data&lt;br/&gt;{data_type: \"soil_humidity\", data: {value: 65.2, unit: \"percent\"}}\n    DB--&gt;&gt;Frontend: Real-time notifications\n    Frontend-&gt;&gt;Frontend: Update sensor dashboards</code></pre>"},{"location":"SYSTEM_ARCHITECTURE/#workflow-2-other-sensor-data-temperature-humidity-etc","title":"Workflow 2: Other Sensor Data (Temperature, Humidity, etc.)","text":"<ol> <li> <p>Device Sends Sensor Data <pre><code>{\n  \"devid\": \"soil_sensor_001\",\n  \"temperature\": 23.5,\n  \"soil_humidity\": 65.2,\n  \"ph_level\": 6.8,\n  \"timestamp\": 1705123456\n}\n</code></pre></p> </li> <li> <p>Edge Function Processing</p> </li> <li>Verify HMAC signature</li> <li>Parse sensor readings</li> <li> <p>Create separate sensor_data entries for each measurement</p> </li> <li> <p>Multiple Database Inserts <pre><code>INSERT INTO sensor_data (devid, data_type, data) VALUES\n('soil_sensor_001', 'temperature', '{\"value\": 23.5, \"unit\": \"celsius\"}'),\n('soil_sensor_001', 'soil_humidity', '{\"value\": 65.2, \"unit\": \"percent\"}'),\n('soil_sensor_001', 'ph_level', '{\"value\": 6.8, \"unit\": \"ph\"}')\n</code></pre></p> </li> </ol>"},{"location":"SYSTEM_ARCHITECTURE/#workflow-3-coap-data-ingestion-python-server","title":"Workflow 3: CoAP Data Ingestion (Python Server)","text":"<ol> <li>Device Connection</li> <li>Device connects to CoAP server on port 5683/UDP</li> <li> <p>Sends protobuf-encoded data to <code>/uplink</code> endpoint</p> </li> <li> <p>Python Server Processing <pre><code># Parse protobuf message\nuplink_data = parse_protobuf(coap_payload)\n\n# Extract different data types\ndevice_config = extract_device_config(uplink_data)\nactivity_data = extract_activity(uplink_data)\nreboot_data = extract_reboot_info(uplink_data)\nsensor_readings = extract_sensor_data(uplink_data)\n</code></pre></p> </li> <li> <p>Concurrent Database Operations <pre><code>await asyncio.gather(\n    upsert_device_config(device_config),\n    insert_activity(activity_data),\n    insert_reboot(reboot_data),\n    insert_sensor_data(sensor_readings)\n)\n</code></pre></p> </li> </ol>"},{"location":"SYSTEM_ARCHITECTURE/#workflow-4-user-authentication-authorization","title":"Workflow 4: User Authentication &amp; Authorization","text":"<ol> <li> <p>User Registration/Login <pre><code>const { data, error } = await supabase.auth.signInWithPassword({\n  email: 'user@example.com',\n  password: 'secure_password'\n})\n</code></pre></p> </li> <li> <p>Automatic Profile Creation</p> </li> <li>Database trigger creates profile entry</li> <li>Assigns default 'user' role</li> <li> <p>Sets up initial permissions</p> </li> <li> <p>Role-based Access Control <pre><code>-- Admin: Full access to all data\n-- Moderator: Can manage devices and sensor data\n-- User: Can only view devices they have access to\n\nSELECT * FROM device_config \nWHERE EXISTS (\n  SELECT 1 FROM device_access \n  WHERE user_id = auth.uid() \n  AND devid = device_config.devid\n)\n</code></pre></p> </li> </ol>"},{"location":"SYSTEM_ARCHITECTURE/#database-schema-security","title":"Database Schema &amp; Security","text":""},{"location":"SYSTEM_ARCHITECTURE/#row-level-security-rls-policies","title":"Row Level Security (RLS) Policies","text":"<p>device_config table: - Admins/Moderators: Full access - Users: Can only view devices they have access to (via device_access table)</p> <p>sensor_data table: - Admins/Moderators: Full access - Authenticated users: Read-only access to all sensor data</p> <p>user_roles table: - Admins: Full access - Users: Can only view their own roles</p>"},{"location":"SYSTEM_ARCHITECTURE/#real-time-subscriptions","title":"Real-time Subscriptions","text":"<pre><code>// Frontend subscribes to real-time updates\nconst subscription = supabase\n  .channel('sensor-updates')\n  .on('postgres_changes', {\n    event: 'INSERT',\n    schema: 'public',\n    table: 'sensor_data'\n  }, (payload) =&gt; {\n    // Update UI with new sensor data\n    updateSensorDisplay(payload.new)\n  })\n  .subscribe()\n</code></pre>"},{"location":"SYSTEM_ARCHITECTURE/#security-best-practices-implemented","title":"Security Best Practices Implemented","text":"<ol> <li>Never store secrets in code - All sensitive data in Supabase secrets</li> <li>HMAC verification - Prevents unauthorized data injection</li> <li>HTTPS/TLS encryption - All network traffic encrypted</li> <li>Row Level Security - Database-level access control</li> <li>JWT authentication - Secure user sessions</li> <li>Input validation - All inputs sanitized and validated</li> <li>Rate limiting - Built-in protection against abuse</li> <li>Audit logging - All database changes logged with timestamps</li> </ol>"},{"location":"SYSTEM_ARCHITECTURE/#extending-the-system","title":"Extending the System","text":""},{"location":"SYSTEM_ARCHITECTURE/#adding-new-sensor-types","title":"Adding New Sensor Types","text":"<ol> <li>Define new data_type in sensor_data table</li> <li>Update Edge Function to handle new sensor format</li> <li>Create Frontend Components to display new sensor data</li> <li>Add Real-time Subscriptions for immediate updates</li> </ol>"},{"location":"SYSTEM_ARCHITECTURE/#example-adding-air-quality-sensor","title":"Example: Adding Air Quality Sensor","text":"<pre><code>// Edge function handles new sensor type\nif (payload.air_quality) {\n  await supabase.from('sensor_data').insert({\n    devid: payload.devid,\n    data_type: 'air_quality',\n    data: {\n      pm25: payload.air_quality.pm25,\n      pm10: payload.air_quality.pm10,\n      co2: payload.air_quality.co2,\n      unit: 'ppm'\n    }\n  })\n}\n</code></pre>"},{"location":"SYSTEM_ARCHITECTURE/#testing-debugging","title":"Testing &amp; Debugging","text":""},{"location":"SYSTEM_ARCHITECTURE/#hmac-signature-testing","title":"HMAC Signature Testing","text":"<pre><code># Generate test signature\nSECRET=\"your_secret_here\"\nPAYLOAD='{\"devid\":\"test_device\",\"temperature\":25.0}'\nSIGNATURE=$(echo -n \"$PAYLOAD\" | openssl dgst -sha256 -hmac \"$SECRET\" | cut -d' ' -f2)\n\n# Test API call\ncurl -X POST https://your-project.supabase.co/functions/v1/ingest-sensor-data \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Signature: sha256=$SIGNATURE\" \\\n  -d \"$PAYLOAD\"\n</code></pre>"},{"location":"SYSTEM_ARCHITECTURE/#monitoring-logs","title":"Monitoring &amp; Logs","text":"<ul> <li>Edge Function Logs: Available in Supabase dashboard</li> <li>Database Logs: Query postgres_logs for database operations</li> <li>Real-time Debugging: Use browser dev tools to monitor WebSocket connections</li> </ul>"},{"location":"SYSTEM_ARCHITECTURE/#future-enhancements","title":"Future Enhancements","text":"<ol> <li>Device Authentication: Individual device certificates</li> <li>Data Encryption: End-to-end encryption for sensitive sensor data</li> <li>Advanced Analytics: Time-series analysis and predictions</li> <li>Mobile Apps: React Native apps for field technicians</li> <li>Alert System: Real-time notifications for anomalies</li> <li>Data Export: CSV/JSON export functionality</li> <li>Device Provisioning: Automated device onboarding</li> </ol>"},{"location":"api/edge-function/","title":"Edge Function API Specification","text":""},{"location":"api/edge-function/#overview","title":"Overview","text":"<p>The <code>ingest-sensor-data</code> Edge Function processes IoT device data sent via the Fly.io CoAP server. It handles location data processing, HMAC signature verification, and database storage.</p> <p>Base URL: <code>https://cdwtsrzshpotkfbyyyjk.supabase.co/functions/v1/</code> Function Path: <code>/ingest-sensor-data</code> Method: <code>POST</code></p>"},{"location":"api/edge-function/#authentication","title":"Authentication","text":"<p>The Edge Function uses HMAC-SHA256 signature verification for authentication. Each request must include a signature header calculated from the request body.</p>"},{"location":"api/edge-function/#required-headers","title":"Required Headers","text":"<pre><code>Content-Type: application/json\nX-Signature: sha256=&lt;hex-encoded-hmac-signature&gt;\n</code></pre>"},{"location":"api/edge-function/#signature-calculation","title":"Signature Calculation","text":"<pre><code>import hmac\nimport hashlib\nimport json\n\ndef calculate_signature(secret_key: str, payload: dict) -&gt; str:\n    message = json.dumps(payload, separators=(',', ':')).encode('utf-8')\n    signature = hmac.new(\n        secret_key.encode('utf-8'),\n        message,\n        hashlib.sha256\n    ).hexdigest()\n    return f\"sha256={signature}\"\n</code></pre>"},{"location":"api/edge-function/#request-schema","title":"Request Schema","text":""},{"location":"api/edge-function/#location-data-request","title":"Location Data Request","text":"<pre><code>{\n  \"devid\": \"string\",\n  \"uplink_count\": \"integer\",\n  \"location\": {\n    \"gnss\": {\n      \"latitude\": \"number\",\n      \"longitude\": \"number\",\n      \"accuracy\": \"number\",\n      \"timestamp\": \"string (ISO 8601)\"\n    },\n    \"wifi\": [\n      {\n        \"bssid\": \"string (MAC address)\",\n        \"rssi\": \"integer\",\n        \"channel\": \"integer\"\n      }\n    ],\n    \"cells\": [\n      {\n        \"mcc\": \"integer\",\n        \"mnc\": \"integer\",\n        \"lac\": \"integer\",\n        \"cid\": \"integer\",\n        \"rssi\": \"integer\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"api/edge-function/#sensor-data-request","title":"Sensor Data Request","text":"<pre><code>{\n  \"devid\": \"string\",\n  \"uplink_count\": \"integer\",\n  \"sensor_data\": {\n    \"temperature\": \"number\",\n    \"humidity\": \"number\",\n    \"soil_moisture\": \"number\",\n    \"battery_level\": \"number\",\n    \"timestamp\": \"string (ISO 8601)\"\n  }\n}\n</code></pre>"},{"location":"api/edge-function/#response-schema","title":"Response Schema","text":""},{"location":"api/edge-function/#success-response","title":"Success Response","text":"<pre><code>{\n  \"success\": true,\n  \"message\": \"Data processed successfully\",\n  \"data\": {\n    \"devid\": \"string\",\n    \"location\": {\n      \"latitude\": \"number\",\n      \"longitude\": \"number\",\n      \"accuracy\": \"number\",\n      \"source\": \"gnss|here|fallback\"\n    },\n    \"processed_at\": \"string (ISO 8601)\"\n  }\n}\n</code></pre>"},{"location":"api/edge-function/#error-response","title":"Error Response","text":"<pre><code>{\n  \"success\": false,\n  \"error\": \"string\",\n  \"code\": \"string\",\n  \"details\": \"object (optional)\"\n}\n</code></pre>"},{"location":"api/edge-function/#error-codes","title":"Error Codes","text":"Code HTTP Status Description <code>INVALID_SIGNATURE</code> 401 HMAC signature verification failed <code>MISSING_DEVICE_ID</code> 400 Device ID not provided in payload <code>INVALID_PAYLOAD</code> 400 Request body format is invalid <code>LOCATION_PROCESSING_FAILED</code> 500 Error processing location data <code>DATABASE_ERROR</code> 500 Database insertion failed <code>EXTERNAL_API_ERROR</code> 502 HERE API request failed"},{"location":"api/edge-function/#location-processing-logic","title":"Location Processing Logic","text":"<p>The Edge Function processes location data using the following priority:</p> <ol> <li>GNSS (Primary): If valid GNSS coordinates are available</li> <li>HERE API (Secondary): If Wi-Fi or cellular data is available</li> <li>Fallback: Previous known location or default coordinates</li> </ol>"},{"location":"api/edge-function/#gnss-processing","title":"GNSS Processing","text":"<p>GNSS data is considered valid if: - Latitude is between -90 and 90 - Longitude is between -180 and 180 - Accuracy is less than 100 meters (configurable)</p>"},{"location":"api/edge-function/#here-api-integration","title":"HERE API Integration","text":"<p>When GNSS is unavailable, the function uses HERE's positioning API:</p> <pre><code>{\n  \"wlan\": [\n    {\n      \"mac\": \"aa:bb:cc:dd:ee:ff\",\n      \"rss\": -45\n    }\n  ],\n  \"cell\": [\n    {\n      \"mcc\": 310,\n      \"mnc\": 410,\n      \"lac\": 1234,\n      \"cid\": 5678,\n      \"rss\": -75\n    }\n  ]\n}\n</code></pre>"},{"location":"api/edge-function/#rate-limiting","title":"Rate Limiting","text":"<p>The Edge Function implements rate limiting:</p> <ul> <li>Per Device: 100 requests per minute</li> <li>Global: 10,000 requests per minute</li> <li>Burst: Up to 200 requests in 10 seconds</li> </ul> <p>Rate limit headers are included in responses:</p> <pre><code>X-RateLimit-Limit: 100\nX-RateLimit-Remaining: 87\nX-RateLimit-Reset: 1699123456\n</code></pre>"},{"location":"api/edge-function/#data-validation","title":"Data Validation","text":""},{"location":"api/edge-function/#device-id-format","title":"Device ID Format","text":"<ul> <li>Must be alphanumeric string</li> <li>Length: 4-32 characters</li> <li>Pattern: <code>^[a-zA-Z0-9_-]+$</code></li> </ul>"},{"location":"api/edge-function/#location-data-validation","title":"Location Data Validation","text":"<ul> <li>GNSS Coordinates: Valid lat/lng ranges</li> <li>Wi-Fi BSSID: Valid MAC address format</li> <li>Cellular: Valid MCC/MNC/LAC/CID ranges</li> <li>RSSI Values: Typically -30 to -100 dBm</li> </ul>"},{"location":"api/edge-function/#sensor-data-validation","title":"Sensor Data Validation","text":"<ul> <li>Temperature: -50\u00b0C to 85\u00b0C</li> <li>Humidity: 0% to 100%</li> <li>Battery: 0% to 100%</li> <li>Timestamps: ISO 8601 format</li> </ul>"},{"location":"api/edge-function/#example-requests","title":"Example Requests","text":""},{"location":"api/edge-function/#location-update-with-gnss","title":"Location Update with GNSS","text":"<pre><code>curl -X POST \\\n  https://cdwtsrzshpotkfbyyyjk.supabase.co/functions/v1/ingest-sensor-data \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Signature: sha256=abc123...\" \\\n  -d '{\n    \"devid\": \"device_001\",\n    \"uplink_count\": 42,\n    \"location\": {\n      \"gnss\": {\n        \"latitude\": 37.7749,\n        \"longitude\": -122.4194,\n        \"accuracy\": 5.0,\n        \"timestamp\": \"2024-01-15T14:30:00Z\"\n      }\n    }\n  }'\n</code></pre>"},{"location":"api/edge-function/#location-update-with-wi-fi","title":"Location Update with Wi-Fi","text":"<pre><code>curl -X POST \\\n  https://cdwtsrzshpotkfbyyyjk.supabase.co/functions/v1/ingest-sensor-data \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Signature: sha256=def456...\" \\\n  -d '{\n    \"devid\": \"device_002\",\n    \"uplink_count\": 43,\n    \"location\": {\n      \"wifi\": [\n        {\n          \"bssid\": \"aa:bb:cc:dd:ee:ff\",\n          \"rssi\": -45,\n          \"channel\": 6\n        },\n        {\n          \"bssid\": \"11:22:33:44:55:66\", \n          \"rssi\": -67,\n          \"channel\": 11\n        }\n      ]\n    }\n  }'\n</code></pre>"},{"location":"api/edge-function/#performance-considerations","title":"Performance Considerations","text":""},{"location":"api/edge-function/#response-times","title":"Response Times","text":"<ul> <li>GNSS Processing: &lt; 100ms average</li> <li>HERE API Processing: &lt; 500ms average</li> <li>Database Insert: &lt; 50ms average</li> </ul>"},{"location":"api/edge-function/#timeout-configuration","title":"Timeout Configuration","text":"<ul> <li>Function Timeout: 30 seconds</li> <li>HERE API Timeout: 5 seconds</li> <li>Database Timeout: 10 seconds</li> </ul>"},{"location":"api/edge-function/#retry-logic","title":"Retry Logic","text":"<ul> <li>HERE API: 3 retries with exponential backoff</li> <li>Database: 2 retries with 100ms delay</li> <li>Failed requests: Logged for manual review</li> </ul>"},{"location":"api/edge-function/#monitoring-logging","title":"Monitoring &amp; Logging","text":""},{"location":"api/edge-function/#log-levels","title":"Log Levels","text":"<ul> <li>INFO: Successful processing</li> <li>WARN: Fallback processing used</li> <li>ERROR: Processing failures</li> <li>DEBUG: Detailed request/response data</li> </ul>"},{"location":"api/edge-function/#metrics-tracked","title":"Metrics Tracked","text":"<ul> <li>Request count by device</li> <li>Processing time percentiles</li> <li>Error rates by type</li> <li>HERE API usage and quotas</li> <li>Database performance metrics</li> </ul>"},{"location":"api/edge-function/#example-log-entry","title":"Example Log Entry","text":"<pre><code>{\n  \"timestamp\": \"2024-01-15T14:30:00Z\",\n  \"level\": \"INFO\",\n  \"message\": \"Location processed successfully\",\n  \"data\": {\n    \"devid\": \"device_001\",\n    \"location_source\": \"gnss\",\n    \"processing_time_ms\": 85,\n    \"uplink_count\": 42\n  }\n}\n</code></pre>"},{"location":"api/flyio-coap/","title":"Fly.io CoAP Interface Specification","text":""},{"location":"api/flyio-coap/#overview","title":"Overview","text":"<p>The Fly.io Python server provides a CoAP-to-HTTPS bridge for IoT devices. It receives CoAP messages over UDP, processes Protobuf payloads, and forwards data to Supabase Edge Functions with HMAC authentication.</p> <p>Server Address: <code>your-app.fly.dev</code> Protocol: CoAP over UDP Port: 5683 Endpoint: <code>/ingest</code></p>"},{"location":"api/flyio-coap/#coap-configuration","title":"CoAP Configuration","text":""},{"location":"api/flyio-coap/#connection-parameters","title":"Connection Parameters","text":"<ul> <li>Protocol: CoAP (RFC 7252)</li> <li>Transport: UDP</li> <li>Port: 5683 (standard CoAP port)</li> <li>Message Type: Confirmable (CON)</li> <li>Content Format: Application/Protobuf (ID: 42)</li> </ul>"},{"location":"api/flyio-coap/#coap-options","title":"CoAP Options","text":"<ul> <li>Uri-Path: <code>ingest</code></li> <li>Content-Format: <code>42</code> (Application/Protobuf)</li> <li>Max-Age: <code>60</code> (seconds)</li> </ul>"},{"location":"api/flyio-coap/#device-authentication","title":"Device Authentication","text":""},{"location":"api/flyio-coap/#hmac-signature-device-side","title":"HMAC Signature (Device-Side)","text":"<p>Devices must calculate HMAC-SHA256 signatures of their Protobuf payload:</p> <pre><code>import hmac\nimport hashlib\n\ndef calculate_device_signature(secret_key: str, protobuf_data: bytes) -&gt; str:\n    signature = hmac.new(\n        secret_key.encode('utf-8'),\n        protobuf_data,\n        hashlib.sha256\n    ).hexdigest()\n    return signature\n</code></pre>"},{"location":"api/flyio-coap/#coap-message-structure","title":"CoAP Message Structure","text":"<pre><code>CoAP Header (4 bytes)\n\u251c\u2500\u2500 Version: 1\n\u251c\u2500\u2500 Type: CON (0)\n\u251c\u2500\u2500 Token Length: 4\n\u251c\u2500\u2500 Code: POST (0.02)\n\u251c\u2500\u2500 Message ID: &lt;random&gt;\n\u2514\u2500\u2500 Token: &lt;4-byte random&gt;\n\nCoAP Options\n\u251c\u2500\u2500 Uri-Path: \"ingest\"\n\u2514\u2500\u2500 Content-Format: 42\n\nPayload\n\u2514\u2500\u2500 Protobuf serialized data\n</code></pre>"},{"location":"api/flyio-coap/#protobuf-schema","title":"Protobuf Schema","text":""},{"location":"api/flyio-coap/#main-message-definition","title":"Main Message Definition","text":"<pre><code>syntax = \"proto3\";\n\nmessage Uplink {\n  string devid = 1;\n  uint32 uplink_count = 2;\n  oneof payload {\n    Heartbeat heartbeat = 3;\n    Location location = 4;\n    SensorData sensor_data = 5;\n  }\n  string signature = 6;  // HMAC signature\n}\n\nmessage Heartbeat {\n  int64 timestamp = 1;\n  uint32 battery_level = 2;\n  int32 signal_strength = 3;\n}\n\nmessage Location {\n  GNSS gnss = 1;\n  repeated WiFiScan wifi = 2;\n  repeated CellularScan cells = 3;\n  int64 timestamp = 4;\n}\n\nmessage GNSS {\n  double latitude = 1;\n  double longitude = 2;\n  float accuracy = 3;\n  int64 timestamp = 4;\n}\n\nmessage WiFiScan {\n  string bssid = 1;\n  int32 rssi = 2;\n  uint32 channel = 3;\n  string ssid = 4;  // Optional\n}\n\nmessage CellularScan {\n  uint32 mcc = 1;  // Mobile Country Code\n  uint32 mnc = 2;  // Mobile Network Code\n  uint32 lac = 3;  // Location Area Code\n  uint32 cid = 4;  // Cell ID\n  int32 rssi = 5;\n}\n\nmessage SensorData {\n  float temperature = 1;\n  float humidity = 2;\n  float soil_moisture = 3;\n  uint32 battery_level = 4;\n  int64 timestamp = 5;\n}\n</code></pre>"},{"location":"api/flyio-coap/#example-protobuf-generation","title":"Example Protobuf Generation","text":"<pre><code>import uplink_pb2  # Generated from .proto file\nimport time\n\n# Create location message\nlocation = uplink_pb2.Location()\nlocation.gnss.latitude = 37.7749\nlocation.gnss.longitude = -122.4194\nlocation.gnss.accuracy = 5.0\nlocation.gnss.timestamp = int(time.time())\n\n# Add Wi-Fi scan data\nwifi = location.wifi.add()\nwifi.bssid = \"aa:bb:cc:dd:ee:ff\"\nwifi.rssi = -45\nwifi.channel = 6\n\n# Create main uplink message\nuplink = uplink_pb2.Uplink()\nuplink.devid = \"device_001\"\nuplink.uplink_count = 42\nuplink.location.CopyFrom(location)\n\n# Calculate signature\nprotobuf_data = uplink.SerializeToString()\nuplink.signature = calculate_device_signature(\"your-secret-key\", protobuf_data)\n\n# Final serialization\nfinal_data = uplink.SerializeToString()\n</code></pre>"},{"location":"api/flyio-coap/#coap-client-implementation","title":"CoAP Client Implementation","text":""},{"location":"api/flyio-coap/#python-example-using-aiocoap","title":"Python Example (using aiocoap)","text":"<pre><code>import asyncio\nfrom aiocoap import *\nimport uplink_pb2\n\nasync def send_coap_message():\n    # Create CoAP context\n    context = await Context.create_client_context()\n\n    # Prepare Protobuf payload\n    uplink = uplink_pb2.Uplink()\n    uplink.devid = \"device_001\"\n    uplink.uplink_count = 42\n\n    # Add location data\n    uplink.location.gnss.latitude = 37.7749\n    uplink.location.gnss.longitude = -122.4194\n    uplink.location.gnss.accuracy = 5.0\n\n    # Serialize and sign\n    protobuf_data = uplink.SerializeToString()\n    uplink.signature = calculate_device_signature(\"secret\", protobuf_data)\n    final_payload = uplink.SerializeToString()\n\n    # Create CoAP request\n    request = Message(\n        code=POST,\n        payload=final_payload,\n        uri=\"coap://your-app.fly.dev:5683/ingest\"\n    )\n    request.opt.content_format = 42  # Application/Protobuf\n\n    try:\n        response = await context.request(request).response\n        print(f\"Response: {response.code}\")\n        print(f\"Payload: {response.payload}\")\n    except Exception as e:\n        print(f\"Error: {e}\")\n\n# Run the client\nasyncio.run(send_coap_message())\n</code></pre>"},{"location":"api/flyio-coap/#c-example-using-libcoap","title":"C++ Example (using libcoap)","text":"<pre><code>#include &lt;coap2/coap.h&gt;\n#include \"uplink.pb.h\"\n\nvoid send_coap_request() {\n    coap_context_t *ctx;\n    coap_session_t *session;\n    coap_pdu_t *pdu;\n    coap_address_t dst;\n\n    // Initialize CoAP context\n    ctx = coap_new_context(nullptr);\n\n    // Set server address\n    coap_address_init(&amp;dst);\n    dst.addr.sin.sin_family = AF_INET;\n    dst.addr.sin.sin_port = htons(5683);\n    inet_pton(AF_INET, \"your-app.fly.dev\", &amp;dst.addr.sin.sin_addr);\n\n    // Create session\n    session = coap_new_client_session(ctx, nullptr, &amp;dst, COAP_PROTO_UDP);\n\n    // Create Protobuf message\n    Uplink uplink;\n    uplink.set_devid(\"device_001\");\n    uplink.set_uplink_count(42);\n\n    auto* location = uplink.mutable_location();\n    auto* gnss = location-&gt;mutable_gnss();\n    gnss-&gt;set_latitude(37.7749);\n    gnss-&gt;set_longitude(-122.4194);\n    gnss-&gt;set_accuracy(5.0);\n\n    // Serialize to string\n    std::string serialized;\n    uplink.SerializeToString(&amp;serialized);\n\n    // Create CoAP PDU\n    pdu = coap_pdu_init(COAP_MESSAGE_CON, COAP_REQUEST_POST, 0, 1024);\n\n    // Add URI path\n    coap_add_option(pdu, COAP_OPTION_URI_PATH, 6, \n                   reinterpret_cast&lt;const uint8_t*&gt;(\"ingest\"));\n\n    // Add content format (Protobuf)\n    uint8_t content_format = 42;\n    coap_add_option(pdu, COAP_OPTION_CONTENT_FORMAT, 1, &amp;content_format);\n\n    // Add payload\n    coap_add_data(pdu, serialized.length(), \n                  reinterpret_cast&lt;const uint8_t*&gt;(serialized.c_str()));\n\n    // Send request\n    coap_send(session, pdu);\n\n    // Cleanup\n    coap_session_release(session);\n    coap_free_context(ctx);\n}\n</code></pre>"},{"location":"api/flyio-coap/#server-processing","title":"Server Processing","text":""},{"location":"api/flyio-coap/#message-flow","title":"Message Flow","text":"<pre><code>sequenceDiagram\n    participant Device as IoT Device\n    participant CoAP as CoAP Server\n    participant Parser as Protobuf Parser\n    participant Validator as Signature Validator\n    participant HTTP as HTTP Client\n    participant Edge as Edge Function\n\n    Device-&gt;&gt;CoAP: CoAP POST /ingest\n    Note over Device,CoAP: Protobuf payload\n\n    CoAP-&gt;&gt;Parser: Extract payload\n    Parser-&gt;&gt;Parser: Deserialize Protobuf\n\n    Parser-&gt;&gt;Validator: Verify HMAC signature\n    alt Signature valid\n        Validator-&gt;&gt;HTTP: Convert to JSON\n        HTTP-&gt;&gt;Edge: HTTPS POST with new signature\n        Edge-&gt;&gt;HTTP: Response\n        HTTP-&gt;&gt;CoAP: Success\n        CoAP-&gt;&gt;Device: CoAP ACK\n    else Signature invalid\n        Validator-&gt;&gt;CoAP: Authentication failed\n        CoAP-&gt;&gt;Device: CoAP 4.01 Unauthorized\n    end</code></pre>"},{"location":"api/flyio-coap/#python-server-logic","title":"Python Server Logic","text":"<pre><code>import aiocoap\nimport asyncio\nimport json\nimport hmac\nimport hashlib\nimport uplink_pb2\nfrom aiocoap import resource\n\nclass IngestResource(resource.Resource):\n    async def render_post(self, request):\n        try:\n            # Parse Protobuf payload\n            uplink = uplink_pb2.Uplink()\n            uplink.ParseFromString(request.payload)\n\n            # Verify device signature\n            if not self.verify_signature(uplink):\n                return aiocoap.Message(code=aiocoap.UNAUTHORIZED)\n\n            # Convert to JSON\n            json_payload = self.protobuf_to_json(uplink)\n\n            # Forward to Edge Function\n            response = await self.forward_to_edge_function(json_payload)\n\n            if response.get('success'):\n                return aiocoap.Message(code=aiocoap.CHANGED)\n            else:\n                return aiocoap.Message(code=aiocoap.INTERNAL_SERVER_ERROR)\n\n        except Exception as e:\n            logger.error(f\"Processing error: {e}\")\n            return aiocoap.Message(code=aiocoap.BAD_REQUEST)\n\n    def verify_signature(self, uplink):\n        # Extract signature and create unsigned message\n        signature = uplink.signature\n        uplink.signature = \"\"\n\n        # Calculate expected signature\n        unsigned_data = uplink.SerializeToString()\n        expected = hmac.new(\n            self.device_secret.encode(),\n            unsigned_data,\n            hashlib.sha256\n        ).hexdigest()\n\n        return hmac.compare_digest(signature, expected)\n</code></pre>"},{"location":"api/flyio-coap/#network-configuration","title":"Network Configuration","text":""},{"location":"api/flyio-coap/#flyio-service-configuration","title":"Fly.io Service Configuration","text":"<pre><code># fly.toml\n[[services]]\n  protocol = \"udp\"\n  internal_port = 5683\n\n  [[services.ports]]\n    port = 5683\n\n[[services]]\n  protocol = \"tcp\"\n  internal_port = 8080\n\n  [[services.ports]]\n    port = 80\n    handlers = [\"http\"]\n\n  [[services.ports]]\n    port = 443\n    handlers = [\"http\", \"tls\"]\n</code></pre>"},{"location":"api/flyio-coap/#firewall-security","title":"Firewall &amp; Security","text":"<ul> <li>Allowed Ports: 5683 (CoAP), 80/443 (HTTP/HTTPS)</li> <li>Rate Limiting: 1000 CoAP messages per minute per IP</li> <li>DDoS Protection: Automatic by Fly.io infrastructure</li> <li>Geographic Filtering: Optional IP geolocation filtering</li> </ul>"},{"location":"api/flyio-coap/#error-handling","title":"Error Handling","text":""},{"location":"api/flyio-coap/#coap-response-codes","title":"CoAP Response Codes","text":"Code Name Description 2.04 Changed Message processed successfully 4.00 Bad Request Invalid Protobuf format 4.01 Unauthorized HMAC signature verification failed 4.15 Unsupported Content-Format Not application/protobuf 5.00 Internal Server Error Server processing error 5.03 Service Unavailable Downstream service unavailable"},{"location":"api/flyio-coap/#device-retry-logic","title":"Device Retry Logic","text":"<p>Devices should implement exponential backoff:</p> <pre><code>async def send_with_retry(message, max_retries=3):\n    for attempt in range(max_retries):\n        try:\n            response = await send_coap_message(message)\n            if response.code.is_successful():\n                return response\n        except Exception as e:\n            wait_time = (2 ** attempt) * 1.0  # 1, 2, 4 seconds\n            await asyncio.sleep(wait_time)\n\n    raise Exception(\"Max retries exceeded\")\n</code></pre>"},{"location":"api/flyio-coap/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"api/flyio-coap/#throughput","title":"Throughput","text":"<ul> <li>Maximum Concurrent: 1000 CoAP connections</li> <li>Messages per Second: 500 sustained, 1000 burst</li> <li>Payload Size Limit: 1KB per message</li> <li>Processing Latency: &lt; 100ms average</li> </ul>"},{"location":"api/flyio-coap/#resource-usage","title":"Resource Usage","text":"<ul> <li>Memory: ~50MB base + 1KB per connection</li> <li>CPU: 0.1 vCPU per 100 messages/second</li> <li>Network: ~100 bytes overhead per message</li> </ul>"},{"location":"api/flyio-coap/#monitoring-metrics","title":"Monitoring Metrics","text":"<ul> <li>CoAP Message Rate: Messages per second</li> <li>Error Rate: Failed/total message ratio</li> <li>Processing Time: P50, P95, P99 latencies</li> <li>Connection Count: Active CoAP sessions</li> </ul>"},{"location":"api/schemas/","title":"Data Schemas &amp; Formats","text":""},{"location":"api/schemas/#overview","title":"Overview","text":"<p>This document defines the data schemas used throughout the IoT Device Management System, including Protobuf definitions, JSON schemas, and database table structures.</p>"},{"location":"api/schemas/#protobuf-schemas","title":"Protobuf Schemas","text":""},{"location":"api/schemas/#device-uplink-message","title":"Device Uplink Message","text":"<pre><code>syntax = \"proto3\";\n\npackage iot.uplink;\n\n// Main uplink message from devices\nmessage Uplink {\n  string devid = 1;                    // Device identifier (4-32 chars)\n  uint32 uplink_count = 2;             // Message sequence number\n  oneof payload {\n    Heartbeat heartbeat = 3;           // Device heartbeat\n    Location location = 4;             // Location data\n    SensorData sensor_data = 5;        // Sensor readings\n  }\n  string signature = 6;                // HMAC-SHA256 signature\n}\n\n// Device heartbeat message\nmessage Heartbeat {\n  int64 timestamp = 1;                 // Unix timestamp (seconds)\n  uint32 battery_level = 2;            // Battery percentage (0-100)\n  int32 signal_strength = 3;           // Signal strength (dBm)\n  string firmware_version = 4;         // Device firmware version\n}\n\n// Location data from various sources\nmessage Location {\n  GNSS gnss = 1;                       // GPS/GLONASS coordinates\n  repeated WiFiScan wifi = 2;          // Wi-Fi access points\n  repeated CellularScan cells = 3;     // Cellular towers\n  int64 timestamp = 4;                 // Measurement timestamp\n}\n\n// GNSS (GPS) coordinates\nmessage GNSS {\n  double latitude = 1;                 // Latitude (-90 to 90)\n  double longitude = 2;                // Longitude (-180 to 180)\n  float accuracy = 3;                  // Accuracy in meters\n  int64 timestamp = 4;                 // Fix timestamp\n  float altitude = 5;                  // Altitude in meters (optional)\n  float speed = 6;                     // Speed in m/s (optional)\n  float heading = 7;                   // Heading in degrees (optional)\n}\n\n// Wi-Fi access point scan\nmessage WiFiScan {\n  string bssid = 1;                    // MAC address (AA:BB:CC:DD:EE:FF)\n  int32 rssi = 2;                      // Signal strength (dBm)\n  uint32 channel = 3;                  // Wi-Fi channel (1-14)\n  string ssid = 4;                     // Network name (optional)\n}\n\n// Cellular tower scan\nmessage CellularScan {\n  uint32 mcc = 1;                      // Mobile Country Code\n  uint32 mnc = 2;                      // Mobile Network Code\n  uint32 lac = 3;                      // Location Area Code\n  uint32 cid = 4;                      // Cell ID\n  int32 rssi = 5;                      // Signal strength (dBm)\n  uint32 psc = 6;                      // Primary Scrambling Code (optional)\n}\n\n// Sensor data readings\nmessage SensorData {\n  float temperature = 1;               // Temperature in Celsius\n  float humidity = 2;                  // Relative humidity (0-100%)\n  float soil_moisture = 3;             // Soil moisture (0-100%)\n  uint32 battery_level = 4;            // Battery percentage (0-100)\n  int64 timestamp = 5;                 // Reading timestamp\n  float pressure = 6;                  // Atmospheric pressure (hPa, optional)\n  float light_level = 7;               // Light intensity (lux, optional)\n  float ph_level = 8;                  // Soil pH level (optional)\n}\n</code></pre>"},{"location":"api/schemas/#json-schemas","title":"JSON Schemas","text":""},{"location":"api/schemas/#edge-function-request-schema","title":"Edge Function Request Schema","text":"<pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Sensor Data Ingestion Request\",\n  \"type\": \"object\",\n  \"required\": [\"devid\"],\n  \"properties\": {\n    \"devid\": {\n      \"type\": \"string\",\n      \"pattern\": \"^[a-zA-Z0-9_-]{4,32}$\",\n      \"description\": \"Unique device identifier\"\n    },\n    \"uplink_count\": {\n      \"type\": \"integer\",\n      \"minimum\": 0,\n      \"maximum\": 4294967295,\n      \"description\": \"Message sequence number\"\n    },\n    \"location\": {\n      \"$ref\": \"#/definitions/location\"\n    },\n    \"sensor_data\": {\n      \"$ref\": \"#/definitions/sensorData\"\n    },\n    \"heartbeat\": {\n      \"$ref\": \"#/definitions/heartbeat\"\n    }\n  },\n  \"definitions\": {\n    \"location\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"gnss\": {\n          \"$ref\": \"#/definitions/gnss\"\n        },\n        \"wifi\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/wifiScan\"\n          },\n          \"maxItems\": 20\n        },\n        \"cells\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/cellularScan\"\n          },\n          \"maxItems\": 10\n        },\n        \"timestamp\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\"\n        }\n      }\n    },\n    \"gnss\": {\n      \"type\": \"object\",\n      \"required\": [\"latitude\", \"longitude\"],\n      \"properties\": {\n        \"latitude\": {\n          \"type\": \"number\",\n          \"minimum\": -90,\n          \"maximum\": 90\n        },\n        \"longitude\": {\n          \"type\": \"number\",\n          \"minimum\": -180,\n          \"maximum\": 180\n        },\n        \"accuracy\": {\n          \"type\": \"number\",\n          \"minimum\": 0,\n          \"maximum\": 1000\n        },\n        \"timestamp\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\"\n        },\n        \"altitude\": {\n          \"type\": \"number\",\n          \"minimum\": -1000,\n          \"maximum\": 10000\n        },\n        \"speed\": {\n          \"type\": \"number\",\n          \"minimum\": 0,\n          \"maximum\": 200\n        },\n        \"heading\": {\n          \"type\": \"number\",\n          \"minimum\": 0,\n          \"maximum\": 360\n        }\n      }\n    },\n    \"wifiScan\": {\n      \"type\": \"object\",\n      \"required\": [\"bssid\"],\n      \"properties\": {\n        \"bssid\": {\n          \"type\": \"string\",\n          \"pattern\": \"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\"\n        },\n        \"rssi\": {\n          \"type\": \"integer\",\n          \"minimum\": -100,\n          \"maximum\": -10\n        },\n        \"channel\": {\n          \"type\": \"integer\",\n          \"minimum\": 1,\n          \"maximum\": 14\n        },\n        \"ssid\": {\n          \"type\": \"string\",\n          \"maxLength\": 32\n        }\n      }\n    },\n    \"cellularScan\": {\n      \"type\": \"object\",\n      \"required\": [\"mcc\", \"mnc\", \"lac\", \"cid\"],\n      \"properties\": {\n        \"mcc\": {\n          \"type\": \"integer\",\n          \"minimum\": 100,\n          \"maximum\": 999\n        },\n        \"mnc\": {\n          \"type\": \"integer\",\n          \"minimum\": 0,\n          \"maximum\": 999\n        },\n        \"lac\": {\n          \"type\": \"integer\",\n          \"minimum\": 1,\n          \"maximum\": 65535\n        },\n        \"cid\": {\n          \"type\": \"integer\",\n          \"minimum\": 1,\n          \"maximum\": 268435455\n        },\n        \"rssi\": {\n          \"type\": \"integer\",\n          \"minimum\": -120,\n          \"maximum\": -30\n        }\n      }\n    },\n    \"sensorData\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"temperature\": {\n          \"type\": \"number\",\n          \"minimum\": -50,\n          \"maximum\": 85\n        },\n        \"humidity\": {\n          \"type\": \"number\",\n          \"minimum\": 0,\n          \"maximum\": 100\n        },\n        \"soil_moisture\": {\n          \"type\": \"number\",\n          \"minimum\": 0,\n          \"maximum\": 100\n        },\n        \"battery_level\": {\n          \"type\": \"integer\",\n          \"minimum\": 0,\n          \"maximum\": 100\n        },\n        \"pressure\": {\n          \"type\": \"number\",\n          \"minimum\": 800,\n          \"maximum\": 1200\n        },\n        \"light_level\": {\n          \"type\": \"number\",\n          \"minimum\": 0,\n          \"maximum\": 100000\n        },\n        \"ph_level\": {\n          \"type\": \"number\",\n          \"minimum\": 0,\n          \"maximum\": 14\n        },\n        \"timestamp\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\"\n        }\n      }\n    },\n    \"heartbeat\": {\n      \"type\": \"object\",\n      \"required\": [\"timestamp\"],\n      \"properties\": {\n        \"timestamp\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\"\n        },\n        \"battery_level\": {\n          \"type\": \"integer\",\n          \"minimum\": 0,\n          \"maximum\": 100\n        },\n        \"signal_strength\": {\n          \"type\": \"integer\",\n          \"minimum\": -120,\n          \"maximum\": -30\n        },\n        \"firmware_version\": {\n          \"type\": \"string\",\n          \"pattern\": \"^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"api/schemas/#edge-function-response-schema","title":"Edge Function Response Schema","text":"<pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Sensor Data Ingestion Response\",\n  \"type\": \"object\",\n  \"required\": [\"success\"],\n  \"properties\": {\n    \"success\": {\n      \"type\": \"boolean\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"data\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"devid\": {\n          \"type\": \"string\"\n        },\n        \"location\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"latitude\": {\"type\": \"number\"},\n            \"longitude\": {\"type\": \"number\"},\n            \"accuracy\": {\"type\": \"number\"},\n            \"source\": {\n              \"type\": \"string\",\n              \"enum\": [\"gnss\", \"here\", \"fallback\"]\n            }\n          }\n        },\n        \"processed_at\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\"\n        }\n      }\n    },\n    \"error\": {\n      \"type\": \"string\"\n    },\n    \"code\": {\n      \"type\": \"string\"\n    },\n    \"details\": {\n      \"type\": \"object\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/schemas/#database-schemas","title":"Database Schemas","text":""},{"location":"api/schemas/#core-tables","title":"Core Tables","text":""},{"location":"api/schemas/#device_config","title":"device_config","text":"<pre><code>CREATE TABLE device_config (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    devid TEXT UNIQUE NOT NULL,\n    name TEXT,\n    device_type TEXT,\n    location_enabled BOOLEAN DEFAULT true,\n    sensor_types TEXT[],\n    last_seen TIMESTAMP WITH TIME ZONE,\n    last_uplink_count INTEGER,\n    device_data_updated_at TIMESTAMP WITH TIME ZONE DEFAULT now(),\n    battery_level INTEGER,\n    signal_strength INTEGER,\n    firmware_version TEXT,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()\n);\n</code></pre>"},{"location":"api/schemas/#sensor_data","title":"sensor_data","text":"<pre><code>CREATE TABLE sensor_data (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    devid TEXT NOT NULL,\n    data_type TEXT NOT NULL,\n    data JSONB NOT NULL,\n    location GEOGRAPHY(POINT, 4326),\n    accuracy REAL,\n    uplink_count INTEGER,\n    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,\n    inputs_hash TEXT,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT now()\n);\n</code></pre>"},{"location":"api/schemas/#profiles","title":"profiles","text":"<pre><code>CREATE TABLE profiles (\n    id UUID PRIMARY KEY REFERENCES auth.users(id),\n    email TEXT,\n    full_name TEXT,\n    avatar_url TEXT,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()\n);\n</code></pre>"},{"location":"api/schemas/#user_roles","title":"user_roles","text":"<pre><code>CREATE TYPE app_role AS ENUM ('admin', 'manager', 'user');\n\nCREATE TABLE user_roles (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    user_id UUID NOT NULL REFERENCES auth.users(id),\n    role app_role NOT NULL,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT now()\n);\n</code></pre>"},{"location":"api/schemas/#indexes","title":"Indexes","text":"<pre><code>-- Performance indexes\nCREATE INDEX idx_sensor_data_devid_timestamp ON sensor_data(devid, timestamp DESC);\nCREATE INDEX idx_sensor_data_location ON sensor_data USING GIST(location);\nCREATE INDEX idx_sensor_data_data_type ON sensor_data(data_type);\nCREATE INDEX idx_sensor_data_created_at ON sensor_data(created_at);\nCREATE INDEX idx_device_config_devid ON device_config(devid);\nCREATE INDEX idx_device_config_last_seen ON device_config(last_seen DESC);\n\n-- Unique constraints\nCREATE UNIQUE INDEX idx_user_roles_user_role ON user_roles(user_id, role);\n</code></pre>"},{"location":"api/schemas/#here-api-schemas","title":"HERE API Schemas","text":""},{"location":"api/schemas/#positioning-request","title":"Positioning Request","text":"<pre><code>{\n  \"wlan\": [\n    {\n      \"mac\": \"string\",     // MAC address (required)\n      \"rss\": \"integer\",    // Signal strength in dBm (optional)\n      \"channel\": \"integer\" // Channel number (optional)\n    }\n  ],\n  \"cell\": [\n    {\n      \"mcc\": \"integer\",    // Mobile Country Code (required)\n      \"mnc\": \"integer\",    // Mobile Network Code (required)\n      \"lac\": \"integer\",    // Location Area Code (required)\n      \"cid\": \"integer\",    // Cell ID (required)\n      \"rss\": \"integer\"     // Signal strength in dBm (optional)\n    }\n  ]\n}\n</code></pre>"},{"location":"api/schemas/#positioning-response","title":"Positioning Response","text":"<pre><code>{\n  \"location\": {\n    \"lat\": 37.7749,\n    \"lng\": -122.4194,\n    \"accuracy\": 50\n  },\n  \"fallback\": \"ipv4\"\n}\n</code></pre>"},{"location":"api/schemas/#data-validation-rules","title":"Data Validation Rules","text":""},{"location":"api/schemas/#device-id-validation","title":"Device ID Validation","text":"<ul> <li>Format: Alphanumeric with hyphens/underscores</li> <li>Length: 4-32 characters</li> <li>Pattern: <code>^[a-zA-Z0-9_-]+$</code></li> <li>Case: Preserved as provided</li> </ul>"},{"location":"api/schemas/#location-data-validation","title":"Location Data Validation","text":"<ul> <li>Latitude: -90 to 90 degrees</li> <li>Longitude: -180 to 180 degrees</li> <li>Accuracy: 0-1000 meters (reasonable GPS accuracy)</li> <li>BSSID: Valid MAC address format</li> <li>RSSI: -100 to -10 dBm (typical Wi-Fi/cellular range)</li> </ul>"},{"location":"api/schemas/#sensor-data-validation","title":"Sensor Data Validation","text":"<ul> <li>Temperature: -50\u00b0C to 85\u00b0C (typical sensor range)</li> <li>Humidity: 0-100% relative humidity</li> <li>Battery: 0-100% charge level</li> <li>Pressure: 800-1200 hPa (typical atmospheric range)</li> <li>Light: 0-100,000 lux</li> <li>pH: 0-14 (standard pH scale)</li> </ul>"},{"location":"api/schemas/#timestamp-validation","title":"Timestamp Validation","text":"<ul> <li>Format: ISO 8601 (YYYY-MM-DDTHH:MM:SS.sssZ)</li> <li>Range: Not more than 24 hours in the past or future</li> <li>Timezone: UTC preferred, local timezone accepted</li> </ul>"},{"location":"api/schemas/#error-response-schemas","title":"Error Response Schemas","text":""},{"location":"api/schemas/#validation-error","title":"Validation Error","text":"<pre><code>{\n  \"success\": false,\n  \"error\": \"Validation failed\",\n  \"code\": \"VALIDATION_ERROR\",\n  \"details\": {\n    \"field\": \"latitude\",\n    \"value\": 91.5,\n    \"message\": \"Latitude must be between -90 and 90\"\n  }\n}\n</code></pre>"},{"location":"api/schemas/#authentication-error","title":"Authentication Error","text":"<pre><code>{\n  \"success\": false,\n  \"error\": \"HMAC signature verification failed\",\n  \"code\": \"INVALID_SIGNATURE\",\n  \"details\": {\n    \"expected_signature\": \"sha256=abc123...\",\n    \"received_signature\": \"sha256=def456...\"\n  }\n}\n</code></pre>"},{"location":"api/schemas/#rate-limit-error","title":"Rate Limit Error","text":"<pre><code>{\n  \"success\": false,\n  \"error\": \"Rate limit exceeded\",\n  \"code\": \"RATE_LIMIT_EXCEEDED\",\n  \"details\": {\n    \"limit\": 100,\n    \"window\": \"1 minute\",\n    \"retry_after\": 45\n  }\n}\n</code></pre>"},{"location":"api/schemas/#schema-versioning","title":"Schema Versioning","text":""},{"location":"api/schemas/#protobuf-versioning","title":"Protobuf Versioning","text":"<ul> <li>Backward Compatibility: New fields added with default values</li> <li>Field Numbers: Never reused, always increment</li> <li>Deprecation: Mark fields as deprecated before removal</li> <li>Version Header: Include version in message when needed</li> </ul>"},{"location":"api/schemas/#json-schema-versioning","title":"JSON Schema Versioning","text":"<ul> <li>Semantic Versioning: Follow semver for schema versions</li> <li>Migration Path: Provide clear upgrade instructions</li> <li>Validation: Test compatibility between versions</li> <li>Documentation: Maintain changelog for schema changes</li> </ul>"},{"location":"api/schemas/#database-schema-versioning","title":"Database Schema Versioning","text":"<ul> <li>Migrations: Use Supabase migration system</li> <li>Rollback: Ensure migrations can be safely rolled back</li> <li>Data Migration: Include data transformation scripts</li> <li>Testing: Validate migrations on production-like data</li> </ul>"},{"location":"architecture/overview/","title":"System Architecture Overview","text":""},{"location":"architecture/overview/#architecture-diagram","title":"Architecture Diagram","text":"<pre><code>graph TB\n    subgraph \"IoT Devices\"\n        D1[Device 1&lt;br/&gt;CoAP Client]\n        D2[Device 2&lt;br/&gt;CoAP Client]\n        D3[Device N&lt;br/&gt;CoAP Client]\n    end\n\n    subgraph \"Fly.io Infrastructure\"\n        FS[Python CoAP Server&lt;br/&gt;UDP:5683]\n        FS --&gt; |HTTPS POST| SF\n    end\n\n    subgraph \"Supabase Backend\"\n        SF[Edge Function&lt;br/&gt;ingest-sensor-data]\n        DB[(PostgreSQL&lt;br/&gt;Database)]\n        AUTH[Auth Service]\n        SF --&gt; DB\n        SF --&gt; HERE[HERE Location API]\n    end\n\n    subgraph \"Frontend\"\n        WEB[React Dashboard]\n        WEB --&gt; AUTH\n        WEB --&gt; DB\n    end\n\n    D1 --&gt; |CoAP/UDP| FS\n    D2 --&gt; |CoAP/UDP| FS\n    D3 --&gt; |CoAP/UDP| FS\n\n    style FS fill:#e1f5fe\n    style SF fill:#e8f5e8\n    style DB fill:#fff3e0\n    style WEB fill:#f3e5f5</code></pre>"},{"location":"architecture/overview/#component-overview","title":"Component Overview","text":""},{"location":"architecture/overview/#iot-devices","title":"IoT Devices","text":"<ul> <li>Protocol: CoAP over UDP</li> <li>Port: 5683</li> <li>Authentication: HMAC-SHA256 signatures</li> <li>Data Format: Protobuf serialization</li> <li>Capabilities:</li> <li>GNSS positioning</li> <li>Wi-Fi scanning</li> <li>Cellular tower detection</li> <li>Sensor data collection</li> </ul>"},{"location":"architecture/overview/#flyio-ingestion-layer","title":"Fly.io Ingestion Layer","text":"<ul> <li>Runtime: Python 3.11+ with aiocoap</li> <li>Scaling: Auto-scaling based on load</li> <li>Security: HMAC signature generation and forwarding</li> <li>Processing:</li> <li>CoAP message parsing</li> <li>Protobuf deserialization</li> <li>HTTPS relay to Supabase</li> </ul>"},{"location":"architecture/overview/#supabase-backend","title":"Supabase Backend","text":"<ul> <li>Edge Functions: Deno runtime for data processing</li> <li>Database: PostgreSQL with Row Level Security</li> <li>Authentication: JWT tokens with role-based access</li> <li>External APIs: HERE Location Services integration</li> </ul>"},{"location":"architecture/overview/#frontend-dashboard","title":"Frontend Dashboard","text":"<ul> <li>Framework: React with TypeScript</li> <li>UI Library: Tailwind CSS with shadcn/ui</li> <li>Mapping: Leaflet with clustering</li> <li>Real-time: Supabase subscriptions</li> </ul>"},{"location":"architecture/overview/#data-flow-sequence","title":"Data Flow Sequence","text":"<pre><code>sequenceDiagram\n    participant Device as IoT Device\n    participant Fly as Fly.io Server\n    participant Edge as Edge Function\n    participant HERE as HERE API\n    participant DB as Database\n    participant Web as Dashboard\n\n    Device-&gt;&gt;Fly: CoAP POST /ingest\n    Note over Device,Fly: Protobuf payload with HMAC\n\n    Fly-&gt;&gt;Fly: Parse CoAP &amp; Protobuf\n    Fly-&gt;&gt;Fly: Generate HMAC signature\n\n    Fly-&gt;&gt;Edge: HTTPS POST with X-Signature\n    Note over Fly,Edge: JSON payload + HMAC header\n\n    Edge-&gt;&gt;Edge: Verify HMAC signature\n    Edge-&gt;&gt;Edge: Process location data\n\n    alt GNSS available\n        Edge-&gt;&gt;DB: Insert location (GNSS)\n    else Wi-Fi/Cell data available\n        Edge-&gt;&gt;HERE: Location query\n        HERE-&gt;&gt;Edge: Coordinates response\n        Edge-&gt;&gt;DB: Insert location (HERE)\n    end\n\n    Edge-&gt;&gt;Fly: 200 OK response\n    Fly-&gt;&gt;Device: CoAP ACK\n\n    DB-&gt;&gt;Web: Real-time subscription\n    Web-&gt;&gt;Web: Update device markers</code></pre>"},{"location":"architecture/overview/#technology-stack","title":"Technology Stack","text":"Layer Technology Purpose Devices CoAP/UDP, Protobuf Efficient IoT communication Ingestion Python, aiocoap, Fly.io Protocol translation &amp; scaling Processing Deno, TypeScript, Supabase Serverless data processing Storage PostgreSQL, RLS Secure data persistence API HERE Location Services Location resolution Frontend React, TypeScript, Tailwind User interface Mapping Leaflet.js Interactive maps"},{"location":"architecture/overview/#scalability-considerations","title":"Scalability Considerations","text":""},{"location":"architecture/overview/#horizontal-scaling","title":"Horizontal Scaling","text":"<ul> <li>Fly.io: Auto-scaling based on CoAP request volume</li> <li>Supabase: Managed PostgreSQL with connection pooling</li> <li>Edge Functions: Automatic scaling per request</li> </ul>"},{"location":"architecture/overview/#performance-optimizations","title":"Performance Optimizations","text":"<ul> <li>Connection Pooling: PostgreSQL connections managed by Supabase</li> <li>Caching: Edge Function responses cached where appropriate</li> <li>Clustering: Map markers clustered for performance</li> <li>Real-time: Efficient WebSocket subscriptions</li> </ul>"},{"location":"architecture/overview/#resource-management","title":"Resource Management","text":"<ul> <li>Memory: Python server optimized for low memory usage</li> <li>CPU: Asynchronous processing in all layers</li> <li>Network: CoAP chosen for minimal bandwidth usage</li> <li>Storage: Database indexes on frequently queried columns</li> </ul>"},{"location":"architecture/overview/#security-architecture","title":"Security Architecture","text":""},{"location":"architecture/overview/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<ul> <li>Device Level: HMAC-SHA256 with shared secrets</li> <li>API Level: JWT tokens with role verification</li> <li>Database Level: Row Level Security policies</li> <li>Network Level: HTTPS/TLS encryption</li> </ul>"},{"location":"architecture/overview/#data-protection","title":"Data Protection","text":"<ul> <li>In Transit: TLS 1.3 for all HTTPS communications</li> <li>At Rest: Supabase managed encryption</li> <li>Processing: Signature verification at every layer</li> <li>Access Control: Role-based permissions (admin/manager/user)</li> </ul>"},{"location":"architecture/overview/#monitoring-observability","title":"Monitoring &amp; Observability","text":""},{"location":"architecture/overview/#application-metrics","title":"Application Metrics","text":"<ul> <li>Device Health: Last seen timestamps and heartbeats</li> <li>Ingestion Rate: CoAP messages per second</li> <li>Processing Time: Edge function execution duration</li> <li>Error Rates: Failed requests and retries</li> </ul>"},{"location":"architecture/overview/#infrastructure-metrics","title":"Infrastructure Metrics","text":"<ul> <li>Fly.io: CPU, memory, and network utilization</li> <li>Supabase: Database performance and connection counts</li> <li>HERE API: Request quotas and response times</li> </ul>"},{"location":"architecture/overview/#alerting","title":"Alerting","text":"<ul> <li>Device Offline: No data received within threshold</li> <li>High Error Rate: Processing failures above 5%</li> <li>API Limits: Approaching HERE API quotas</li> <li>System Health: Infrastructure component failures</li> </ul>"},{"location":"development/contributing/","title":"Contributing Guide","text":""},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":"<ol> <li>Create feature branch from main</li> <li>Make changes following coding standards</li> <li>Test locally using development environment</li> <li>Submit pull request for review</li> </ol>"},{"location":"development/contributing/#code-standards","title":"Code Standards","text":""},{"location":"development/contributing/#frontend-reacttypescript","title":"Frontend (React/TypeScript)","text":"<ul> <li>Use TypeScript for type safety</li> <li>Follow ESLint configuration</li> <li>Use Tailwind CSS for styling</li> </ul>"},{"location":"development/contributing/#backend-python","title":"Backend (Python)","text":"<ul> <li>Follow PEP 8 style guidelines</li> <li>Add type hints where appropriate</li> <li>Include proper error handling</li> </ul>"},{"location":"development/contributing/#documentation","title":"Documentation","text":"<ul> <li>Update relevant documentation for any changes</li> <li>Use clear, concise language</li> <li>Include code examples where helpful</li> </ul>"},{"location":"development/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Ensure all tests pass</li> <li>Update documentation as needed</li> <li>Request review from maintainers</li> <li>Address feedback promptly</li> </ol> <p>For detailed development setup, see Development Guide.</p>"},{"location":"development/testing/","title":"Testing Guide","text":""},{"location":"development/testing/#local-testing","title":"Local Testing","text":""},{"location":"development/testing/#frontend-testing","title":"Frontend Testing","text":"<pre><code>npm run dev\nnpm run build\n</code></pre>"},{"location":"development/testing/#backend-testing","title":"Backend Testing","text":"<pre><code>cd python-server\npython test_supabase.py\n</code></pre>"},{"location":"development/testing/#integration-testing","title":"Integration Testing","text":""},{"location":"development/testing/#device-simulation","title":"Device Simulation","text":"<p>Test CoAP endpoints with sample data to verify the complete pipeline.</p>"},{"location":"development/testing/#end-to-end-testing","title":"End-to-End Testing","text":"<ol> <li>Send test data from device simulator</li> <li>Verify data appears in Supabase</li> <li>Check dashboard displays data correctly</li> </ol> <p>For detailed testing procedures, see Development Guide.</p>"},{"location":"operations/deployment/","title":"Deployment Guide","text":""},{"location":"operations/deployment/#overview","title":"Overview","text":"<p>This guide covers the deployment procedures for the complete IoT Device Management System, including Fly.io infrastructure, Supabase configuration, and frontend deployment.</p>"},{"location":"operations/deployment/#prerequisites","title":"Prerequisites","text":""},{"location":"operations/deployment/#required-tools","title":"Required Tools","text":"<pre><code># Install Fly.io CLI\ncurl -L https://fly.io/install.sh | sh\n\n# Install Supabase CLI\nnpm install -g supabase@latest\n\n# Install Node.js and npm\n# Visit https://nodejs.org/ for installation\n</code></pre>"},{"location":"operations/deployment/#required-accounts","title":"Required Accounts","text":"<ul> <li>Fly.io Account</li> <li>Supabase Account</li> <li>HERE Developer Account</li> <li>GitHub account for source control</li> </ul>"},{"location":"operations/deployment/#environment-setup","title":"Environment Setup","text":"<pre><code># Clone repository\ngit clone https://github.com/your-org/iot-device-management\ncd iot-device-management\n\n# Install dependencies\nnpm install\n</code></pre>"},{"location":"operations/deployment/#flyio-deployment","title":"Fly.io Deployment","text":""},{"location":"operations/deployment/#initial-setup","title":"Initial Setup","text":"<ol> <li> <p>Login to Fly.io <pre><code>flyctl auth login\n</code></pre></p> </li> <li> <p>Create New App <pre><code>cd python-server\nflyctl apps create your-coap-server\n</code></pre></p> </li> <li> <p>Configure Environment Variables <pre><code># Set Supabase connection\nflyctl secrets set SUPABASE_URL=\"https://cdwtsrzshpotkfbyyyjk.supabase.co\"\nflyctl secrets set SUPABASE_SERVICE_ROLE_KEY=\"your-service-role-key\"\n\n# Set security keys\nflyctl secrets set FLY_INGEST_SECRET=\"your-hmac-secret-key\"\n\n# Optional: Set logging level\nflyctl secrets set LOG_LEVEL=\"INFO\"\n</code></pre></p> </li> <li> <p>Deploy Server <pre><code>flyctl deploy\n</code></pre></p> </li> </ol>"},{"location":"operations/deployment/#verify-deployment","title":"Verify Deployment","text":"<pre><code># Check app status\nflyctl status\n\n# View logs\nflyctl logs\n\n# Test CoAP endpoint\nflyctl ssh console\nnc -u your-app.fly.dev 5683\n</code></pre>"},{"location":"operations/deployment/#scaling-configuration","title":"Scaling Configuration","text":"<pre><code># Set auto-scaling\nflyctl scale count 2-10\n\n# Set VM resources\nflyctl scale vm shared-cpu-1x\n\n# Regional deployment\nflyctl regions add ord lax\n</code></pre>"},{"location":"operations/deployment/#supabase-configuration","title":"Supabase Configuration","text":""},{"location":"operations/deployment/#database-setup","title":"Database Setup","text":"<ol> <li>Create Supabase Project</li> <li>Visit Supabase Dashboard</li> <li>Click \"New Project\"</li> <li> <p>Configure project settings</p> </li> <li> <p>Run Database Migrations <pre><code># Initialize Supabase locally\nsupabase init\n\n# Link to remote project\nsupabase link --project-ref cdwtsrzshpotkfbyyyjk\n\n# Apply migrations\nsupabase db push\n</code></pre></p> </li> <li> <p>Configure Row Level Security <pre><code>-- Enable RLS on all tables\nALTER TABLE device_config ENABLE ROW LEVEL SECURITY;\nALTER TABLE sensor_data ENABLE ROW LEVEL SECURITY;\nALTER TABLE profiles ENABLE ROW LEVEL SECURITY;\nALTER TABLE user_roles ENABLE ROW LEVEL SECURITY;\n\n-- Apply security policies (see database schema docs)\n</code></pre></p> </li> </ol>"},{"location":"operations/deployment/#edge-functions-deployment","title":"Edge Functions Deployment","text":"<ol> <li> <p>Configure Function Secrets <pre><code># Set HERE API key\nsupabase secrets set HERE_API_KEY=\"your-here-api-key\"\n\n# Set Fly.io verification secret\nsupabase secrets set FLY_INGEST_SECRET=\"your-hmac-secret-key\"\n\n# Set Supabase keys (if needed for internal calls)\nsupabase secrets set SUPABASE_URL=\"https://cdwtsrzshpotkfbyyyjk.supabase.co\"\nsupabase secrets set SUPABASE_SERVICE_ROLE_KEY=\"your-service-role-key\"\n</code></pre></p> </li> <li> <p>Deploy Edge Functions <pre><code># Deploy all functions\nsupabase functions deploy\n\n# Deploy specific function\nsupabase functions deploy ingest-sensor-data\n</code></pre></p> </li> <li> <p>Verify Function Deployment <pre><code># Test function locally\nsupabase functions serve\n\n# Test deployed function\ncurl -X POST \\\n  https://cdwtsrzshpotkfbyyyjk.supabase.co/functions/v1/ingest-sensor-data \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Signature: sha256=test\" \\\n  -d '{\"devid\": \"test\", \"location\": {}}'\n</code></pre></p> </li> </ol>"},{"location":"operations/deployment/#authentication-setup","title":"Authentication Setup","text":"<ol> <li>Configure Auth Providers</li> <li>Visit Auth &gt; Providers in Supabase Dashboard</li> <li>Enable Email/Password authentication</li> <li> <p>Configure OAuth providers if needed</p> </li> <li> <p>Set Auth Policies <pre><code>-- Create default user role on signup\nCREATE OR REPLACE FUNCTION public.handle_new_user()\nRETURNS trigger AS $$\nBEGIN\n  INSERT INTO public.profiles (id, email, full_name)\n  VALUES (NEW.id, NEW.email, COALESCE(NEW.raw_user_meta_data -&gt;&gt; 'full_name', ''));\n\n  INSERT INTO public.user_roles (user_id, role)\n  VALUES (NEW.id, 'user');\n\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\nCREATE TRIGGER on_auth_user_created\n  AFTER INSERT ON auth.users\n  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();\n</code></pre></p> </li> </ol>"},{"location":"operations/deployment/#frontend-deployment","title":"Frontend Deployment","text":""},{"location":"operations/deployment/#build-configuration","title":"Build Configuration","text":"<ol> <li> <p>Environment Variables <pre><code># Create .env.local (for local development)\nVITE_SUPABASE_URL=https://cdwtsrzshpotkfbyyyjk.supabase.co\nVITE_SUPABASE_ANON_KEY=your-anon-key\n</code></pre></p> </li> <li> <p>Build Application <pre><code>npm run build\n</code></pre></p> </li> </ol>"},{"location":"operations/deployment/#deployment-options","title":"Deployment Options","text":""},{"location":"operations/deployment/#option-1-vercel-deployment","title":"Option 1: Vercel Deployment","text":"<pre><code># Install Vercel CLI\nnpm install -g vercel\n\n# Deploy\nvercel\n\n# Set environment variables in Vercel dashboard\n</code></pre>"},{"location":"operations/deployment/#option-2-netlify-deployment","title":"Option 2: Netlify Deployment","text":"<pre><code># Install Netlify CLI\nnpm install -g netlify-cli\n\n# Deploy\nnetlify deploy --prod\n\n# Set environment variables in Netlify dashboard\n</code></pre>"},{"location":"operations/deployment/#option-3-github-pages","title":"Option 3: GitHub Pages","text":"<pre><code># Install gh-pages\nnpm install -g gh-pages\n\n# Deploy\nnpm run build\ngh-pages -d dist\n</code></pre>"},{"location":"operations/deployment/#ssltls-configuration","title":"SSL/TLS Configuration","text":""},{"location":"operations/deployment/#flyio-https","title":"Fly.io HTTPS","text":"<pre><code># Fly.io automatically provides HTTPS certificates\n# Verify certificate\ncurl -I https://your-app.fly.dev\n</code></pre>"},{"location":"operations/deployment/#custom-domain-optional","title":"Custom Domain (Optional)","text":"<pre><code># Add custom domain\nflyctl certs add your-domain.com\n\n# Verify DNS configuration\nflyctl certs show your-domain.com\n</code></pre>"},{"location":"operations/deployment/#monitoring-setup","title":"Monitoring Setup","text":""},{"location":"operations/deployment/#application-monitoring","title":"Application Monitoring","text":"<ol> <li> <p>Fly.io Metrics <pre><code># View metrics dashboard\nflyctl dashboard\n\n# Set up alerts\nflyctl webhooks create --name alerts --url https://your-webhook-url\n</code></pre></p> </li> <li> <p>Supabase Monitoring</p> </li> <li>Visit Dashboard &gt; Logs</li> <li>Configure log retention</li> <li>Set up database performance monitoring</li> </ol>"},{"location":"operations/deployment/#health-checks","title":"Health Checks","text":"<ol> <li> <p>Fly.io Health Check <pre><code># fly.toml\n[http_service]\n  internal_port = 8080\n  force_https = true\n\n  [http_service.http_checks]\n    [http_service.http_checks.health]\n      path = \"/health\"\n      interval = \"10s\"\n      timeout = \"2s\"\n</code></pre></p> </li> <li> <p>Edge Function Health Check <pre><code>// Add to Edge Function\nif (req.method === 'GET' &amp;&amp; new URL(req.url).pathname === '/health') {\n  return new Response('OK', { status: 200 });\n}\n</code></pre></p> </li> </ol>"},{"location":"operations/deployment/#log-aggregation","title":"Log Aggregation","text":"<ol> <li> <p>Centralized Logging <pre><code># Stream logs to external service\nflyctl logs --app your-app | logger -t flyio\n\n# Set up log forwarding (optional)\nflyctl scale vm shared-cpu-1x --vm-memory 512\n</code></pre></p> </li> <li> <p>Supabase Logs</p> </li> <li>Access via Dashboard &gt; Logs</li> <li>Configure log exports</li> <li>Set up alerts for errors</li> </ol>"},{"location":"operations/deployment/#backup-procedures","title":"Backup Procedures","text":""},{"location":"operations/deployment/#database-backups","title":"Database Backups","text":"<pre><code># Manual backup\nsupabase db dump --file backup.sql\n\n# Automated backups (configured in Supabase dashboard)\n# - Daily backups enabled by default\n# - Point-in-time recovery available\n# - Download backups via dashboard\n</code></pre>"},{"location":"operations/deployment/#configuration-backups","title":"Configuration Backups","text":"<pre><code># Export secrets (store securely)\nflyctl secrets list\n\n# Backup Supabase configuration\nsupabase db dump --schema-only --file schema-backup.sql\nsupabase functions download\n</code></pre>"},{"location":"operations/deployment/#rollback-procedures","title":"Rollback Procedures","text":""},{"location":"operations/deployment/#flyio-rollback","title":"Fly.io Rollback","text":"<pre><code># List recent deployments\nflyctl releases\n\n# Rollback to previous version\nflyctl releases rollback --version 42\n</code></pre>"},{"location":"operations/deployment/#supabase-rollback","title":"Supabase Rollback","text":"<pre><code># Database rollback (point-in-time recovery)\n# Available through Supabase dashboard under Database &gt; Backups\n\n# Edge Function rollback\ngit checkout previous-version\nsupabase functions deploy\n</code></pre>"},{"location":"operations/deployment/#frontend-rollback","title":"Frontend Rollback","text":"<pre><code># Vercel\nvercel rollback\n\n# Netlify\nnetlify sites:list\nnetlify api rollbackSiteDeploy --site-id xxx --deploy-id xxx\n</code></pre>"},{"location":"operations/deployment/#post-deployment-verification","title":"Post-Deployment Verification","text":""},{"location":"operations/deployment/#system-health-checks","title":"System Health Checks","text":"<ol> <li> <p>CoAP Server Test <pre><code># Test CoAP endpoint\necho \"test\" | nc -u your-app.fly.dev 5683\n</code></pre></p> </li> <li> <p>Edge Function Test <pre><code>curl -X POST \\\n  https://cdwtsrzshpotkfbyyyjk.supabase.co/functions/v1/ingest-sensor-data \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"test\": true}'\n</code></pre></p> </li> <li> <p>Database Connectivity <pre><code># Test database connection\nsupabase db ping\n</code></pre></p> </li> <li> <p>Frontend Test <pre><code># Test frontend deployment\ncurl -I https://your-frontend-url.com\n</code></pre></p> </li> </ol>"},{"location":"operations/deployment/#performance-verification","title":"Performance Verification","text":"<ol> <li> <p>Load Testing <pre><code># Install Artillery\nnpm install -g artillery\n\n# Create load test config\ncat &gt; load-test.yml &lt;&lt; EOF\nconfig:\n  target: 'https://your-app.fly.dev'\n  phases:\n    - duration: 60\n      arrivalRate: 10\nscenarios:\n  - name: \"CoAP simulation\"\n    requests:\n      - post:\n          url: \"/ingest\"\n          json:\n            devid: \"test-device\"\n            location: {}\nEOF\n\n# Run load test\nartillery run load-test.yml\n</code></pre></p> </li> <li> <p>Database Performance <pre><code>-- Check query performance\nEXPLAIN ANALYZE SELECT * FROM sensor_data WHERE devid = 'test' ORDER BY timestamp DESC LIMIT 100;\n\n-- Check index usage\nSELECT schemaname, tablename, indexname, idx_tup_read, idx_tup_fetch \nFROM pg_stat_user_indexes;\n</code></pre></p> </li> </ol>"},{"location":"operations/deployment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"operations/deployment/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Fly.io App Won't Start <pre><code># Check logs\nflyctl logs --app your-app\n\n# Common fixes\nflyctl restart\nflyctl scale count 1\n</code></pre></p> </li> <li> <p>Edge Function Errors <pre><code># Check function logs\nsupabase functions logs --filter edge-function-name\n\n# Common fixes\nsupabase secrets list  # Verify secrets\nsupabase functions deploy  # Redeploy\n</code></pre></p> </li> <li> <p>Database Connection Issues <pre><code># Check database status\nsupabase db status\n\n# Reset database password\nsupabase db reset\n</code></pre></p> </li> </ol>"},{"location":"operations/deployment/#emergency-procedures","title":"Emergency Procedures","text":"<ol> <li> <p>System Outage <pre><code># Scale up Fly.io app\nflyctl scale count 5\n\n# Check Supabase status\ncurl https://status.supabase.com/api/v2/status.json\n</code></pre></p> </li> <li> <p>Data Loss Prevention <pre><code># Immediate backup\nsupabase db dump --file emergency-backup-$(date +%Y%m%d_%H%M%S).sql\n\n# Stop writes if needed\nflyctl scale count 0\n</code></pre></p> </li> </ol>"},{"location":"operations/deployment/#security-checklist","title":"Security Checklist","text":"<ul> <li>[ ] All secrets properly configured</li> <li>[ ] HTTPS enabled on all services</li> <li>[ ] Database RLS policies active</li> <li>[ ] Rate limiting configured</li> <li>[ ] Regular security updates scheduled</li> <li>[ ] Backup procedures tested</li> <li>[ ] Monitoring alerts configured</li> <li>[ ] Access logs enabled</li> <li>[ ] API keys rotated regularly</li> <li>[ ] Network security groups configured</li> </ul>"},{"location":"operations/monitoring/","title":"Monitoring &amp; Observability","text":""},{"location":"operations/monitoring/#overview","title":"Overview","text":"<p>This document outlines the monitoring strategy, metrics collection, alerting, and observability practices for the IoT Device Management System.</p>"},{"location":"operations/monitoring/#architecture-monitoring","title":"Architecture Monitoring","text":""},{"location":"operations/monitoring/#system-health-dashboard","title":"System Health Dashboard","text":"<pre><code>graph TB\n    subgraph \"Monitoring Stack\"\n        M1[Device Metrics]\n        M2[Fly.io Metrics]\n        M3[Supabase Metrics] \n        M4[Edge Function Logs]\n        M5[HERE API Metrics]\n    end\n\n    subgraph \"Dashboards\"\n        D1[System Overview]\n        D2[Device Status]\n        D3[Performance Metrics]\n        D4[Error Analysis]\n    end\n\n    subgraph \"Alerting\"\n        A1[PagerDuty]\n        A2[Slack Notifications]\n        A3[Email Alerts]\n    end\n\n    M1 --&gt; D1\n    M2 --&gt; D1\n    M3 --&gt; D1\n    M4 --&gt; D4\n    M5 --&gt; D3\n\n    D1 --&gt; A1\n    D4 --&gt; A2\n    D3 --&gt; A3</code></pre>"},{"location":"operations/monitoring/#key-metrics","title":"Key Metrics","text":""},{"location":"operations/monitoring/#device-level-metrics","title":"Device-Level Metrics","text":""},{"location":"operations/monitoring/#device-health","title":"Device Health","text":"<pre><code>-- Active devices (last 24 hours)\nSELECT COUNT(DISTINCT devid) as active_devices\nFROM sensor_data \nWHERE timestamp &gt; NOW() - INTERVAL '24 hours';\n\n-- Device uptime percentage\nSELECT \n    devid,\n    COUNT(*) as total_reports,\n    COUNT(*) * 100.0 / (24 * 60 / 15) as uptime_percentage  -- Assuming 15min intervals\nFROM sensor_data \nWHERE timestamp &gt; NOW() - INTERVAL '24 hours'\nGROUP BY devid;\n\n-- Battery levels\nSELECT \n    devid,\n    AVG(CAST(data-&gt;&gt;'battery_level' AS FLOAT)) as avg_battery\nFROM sensor_data \nWHERE timestamp &gt; NOW() - INTERVAL '1 hour'\n  AND data ? 'battery_level'\nGROUP BY devid\nORDER BY avg_battery ASC;\n</code></pre>"},{"location":"operations/monitoring/#data-quality","title":"Data Quality","text":"<pre><code>-- Location accuracy distribution\nSELECT \n    CASE \n        WHEN CAST(data-&gt;&gt;'accuracy' AS FLOAT) &lt; 10 THEN 'High (&lt;10m)'\n        WHEN CAST(data-&gt;&gt;'accuracy' AS FLOAT) &lt; 50 THEN 'Medium (10-50m)'\n        ELSE 'Low (&gt;50m)'\n    END as accuracy_tier,\n    COUNT(*) as count\nFROM sensor_data \nWHERE data_type = 'location'\n  AND timestamp &gt; NOW() - INTERVAL '24 hours'\nGROUP BY accuracy_tier;\n\n-- Data ingestion rate\nSELECT \n    DATE_TRUNC('hour', timestamp) as hour,\n    COUNT(*) as message_count,\n    COUNT(DISTINCT devid) as unique_devices\nFROM sensor_data \nWHERE timestamp &gt; NOW() - INTERVAL '24 hours'\nGROUP BY hour\nORDER BY hour;\n</code></pre>"},{"location":"operations/monitoring/#infrastructure-metrics","title":"Infrastructure Metrics","text":""},{"location":"operations/monitoring/#flyio-monitoring","title":"Fly.io Monitoring","text":"<pre><code># CPU and Memory usage\nflyctl metrics --app your-coap-server\n\n# Request metrics\nflyctl logs --app your-coap-server | grep \"REQUEST\"\n\n# Error rate monitoring\nflyctl logs --app your-coap-server | grep \"ERROR\" | wc -l\n</code></pre>"},{"location":"operations/monitoring/#supabase-metrics","title":"Supabase Metrics","text":"<pre><code>-- Database performance\nSELECT \n    schemaname,\n    tablename,\n    n_tup_ins + n_tup_upd + n_tup_del as total_operations,\n    n_tup_ins as inserts,\n    n_tup_upd as updates,\n    n_tup_del as deletes,\n    seq_scan,\n    idx_scan\nFROM pg_stat_user_tables \nORDER BY total_operations DESC;\n\n-- Connection count\nSELECT count(*) as active_connections\nFROM pg_stat_activity \nWHERE state = 'active';\n\n-- Slow queries\nSELECT \n    query,\n    mean_exec_time,\n    calls,\n    total_exec_time\nFROM pg_stat_statements \nWHERE mean_exec_time &gt; 100  -- queries taking &gt; 100ms\nORDER BY mean_exec_time DESC\nLIMIT 10;\n</code></pre>"},{"location":"operations/monitoring/#api-performance-metrics","title":"API Performance Metrics","text":""},{"location":"operations/monitoring/#edge-function-performance","title":"Edge Function Performance","text":"<pre><code>// Add to Edge Function for metrics collection\nconst startTime = Date.now();\n\n// ... processing logic ...\n\nconst processingTime = Date.now() - startTime;\nconsole.log(JSON.stringify({\n  metric: 'processing_time',\n  value: processingTime,\n  devid: payload.devid,\n  timestamp: new Date().toISOString()\n}));\n</code></pre>"},{"location":"operations/monitoring/#here-api-usage","title":"HERE API Usage","text":"<pre><code>// Track HERE API calls\nconst hereApiMetrics = {\n  requests_total: 0,\n  requests_success: 0,\n  requests_error: 0,\n  response_time_ms: [],\n  quota_remaining: 0\n};\n\nasync function callHereApi(data) {\n  const startTime = Date.now();\n  hereApiMetrics.requests_total++;\n\n  try {\n    const response = await fetch(HERE_API_URL, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n\n    const responseTime = Date.now() - startTime;\n    hereApiMetrics.response_time_ms.push(responseTime);\n\n    if (response.ok) {\n      hereApiMetrics.requests_success++;\n      hereApiMetrics.quota_remaining = response.headers.get('X-RateLimit-Remaining');\n    } else {\n      hereApiMetrics.requests_error++;\n    }\n\n    return response;\n  } catch (error) {\n    hereApiMetrics.requests_error++;\n    throw error;\n  }\n}\n</code></pre>"},{"location":"operations/monitoring/#dashboard-configuration","title":"Dashboard Configuration","text":""},{"location":"operations/monitoring/#system-overview-dashboard","title":"System Overview Dashboard","text":""},{"location":"operations/monitoring/#key-performance-indicators-kpis","title":"Key Performance Indicators (KPIs)","text":"<ul> <li>System Uptime: 99.9% target</li> <li>Active Devices: Current count vs. expected</li> <li>Data Ingestion Rate: Messages per minute</li> <li>Error Rate: &lt; 1% target</li> <li>Average Response Time: &lt; 500ms target</li> </ul>"},{"location":"operations/monitoring/#metrics-queries","title":"Metrics Queries","text":"<pre><code>-- System uptime (last 24 hours)\nWITH hourly_status AS (\n  SELECT \n    DATE_TRUNC('hour', timestamp) as hour,\n    COUNT(*) &gt; 0 as system_active\n  FROM sensor_data \n  WHERE timestamp &gt; NOW() - INTERVAL '24 hours'\n  GROUP BY hour\n)\nSELECT \n  COUNT(CASE WHEN system_active THEN 1 END) * 100.0 / COUNT(*) as uptime_percentage\nFROM hourly_status;\n\n-- Error rate calculation\nWITH error_count AS (\n  SELECT COUNT(*) as errors\n  FROM logs \n  WHERE level = 'ERROR' \n    AND timestamp &gt; NOW() - INTERVAL '1 hour'\n),\ntotal_count AS (\n  SELECT COUNT(*) as total\n  FROM sensor_data \n  WHERE timestamp &gt; NOW() - INTERVAL '1 hour'\n)\nSELECT \n  errors * 100.0 / NULLIF(total, 0) as error_rate_percentage\nFROM error_count, total_count;\n</code></pre>"},{"location":"operations/monitoring/#device-status-dashboard","title":"Device Status Dashboard","text":""},{"location":"operations/monitoring/#device-grid-view","title":"Device Grid View","text":"<pre><code>-- Device status summary\nSELECT \n    devid,\n    MAX(timestamp) as last_seen,\n    EXTRACT(EPOCH FROM (NOW() - MAX(timestamp))) / 60 as minutes_offline,\n    COUNT(*) as messages_last_hour,\n    AVG(CAST(data-&gt;&gt;'battery_level' AS FLOAT)) as avg_battery,\n    CASE \n        WHEN MAX(timestamp) &gt; NOW() - INTERVAL '30 minutes' THEN 'online'\n        WHEN MAX(timestamp) &gt; NOW() - INTERVAL '2 hours' THEN 'warning'\n        ELSE 'offline'\n    END as status\nFROM sensor_data \nWHERE timestamp &gt; NOW() - INTERVAL '1 hour'\nGROUP BY devid\nORDER BY last_seen DESC;\n</code></pre>"},{"location":"operations/monitoring/#location-accuracy-heatmap","title":"Location Accuracy Heatmap","text":"<pre><code>-- Location accuracy by device and time\nSELECT \n    devid,\n    DATE_TRUNC('hour', timestamp) as hour,\n    AVG(CAST(data-&gt;&gt;'accuracy' AS FLOAT)) as avg_accuracy,\n    COUNT(*) as location_reports\nFROM sensor_data \nWHERE data_type = 'location'\n  AND timestamp &gt; NOW() - INTERVAL '24 hours'\n  AND data ? 'accuracy'\nGROUP BY devid, hour\nORDER BY devid, hour;\n</code></pre>"},{"location":"operations/monitoring/#alerting-configuration","title":"Alerting Configuration","text":""},{"location":"operations/monitoring/#critical-alerts-pagerduty","title":"Critical Alerts (PagerDuty)","text":""},{"location":"operations/monitoring/#system-down-alert","title":"System Down Alert","text":"<pre><code>-- Alert if no data received in 15 minutes\nSELECT 'CRITICAL: No device data received' as alert\nWHERE NOT EXISTS (\n  SELECT 1 FROM sensor_data \n  WHERE timestamp &gt; NOW() - INTERVAL '15 minutes'\n);\n</code></pre>"},{"location":"operations/monitoring/#high-error-rate-alert","title":"High Error Rate Alert","text":"<pre><code>-- Alert if error rate &gt; 5% in last 10 minutes\nWITH recent_errors AS (\n  SELECT COUNT(*) as error_count\n  FROM logs \n  WHERE level = 'ERROR' \n    AND timestamp &gt; NOW() - INTERVAL '10 minutes'\n),\nrecent_total AS (\n  SELECT COUNT(*) as total_count\n  FROM sensor_data \n  WHERE timestamp &gt; NOW() - INTERVAL '10 minutes'\n)\nSELECT 'CRITICAL: High error rate' as alert\nFROM recent_errors, recent_total\nWHERE error_count * 100.0 / NULLIF(total_count, 0) &gt; 5;\n</code></pre>"},{"location":"operations/monitoring/#warning-alerts-slack","title":"Warning Alerts (Slack)","text":""},{"location":"operations/monitoring/#device-offline-alert","title":"Device Offline Alert","text":"<pre><code>-- Alert if device offline &gt; 2 hours\nSELECT \n    CONCAT('WARNING: Device ', devid, ' offline for ', \n           ROUND(EXTRACT(EPOCH FROM (NOW() - MAX(timestamp))) / 3600, 1), ' hours') as alert,\n    devid\nFROM sensor_data \nGROUP BY devid\nHAVING MAX(timestamp) &lt; NOW() - INTERVAL '2 hours'\n  AND MAX(timestamp) &gt; NOW() - INTERVAL '24 hours';  -- Only alert for recently active devices\n</code></pre>"},{"location":"operations/monitoring/#low-battery-alert","title":"Low Battery Alert","text":"<pre><code>-- Alert if device battery &lt; 20%\nSELECT \n    CONCAT('WARNING: Device ', devid, ' battery at ', \n           ROUND(AVG(CAST(data-&gt;&gt;'battery_level' AS FLOAT)), 1), '%') as alert,\n    devid\nFROM sensor_data \nWHERE timestamp &gt; NOW() - INTERVAL '30 minutes'\n  AND data ? 'battery_level'\nGROUP BY devid\nHAVING AVG(CAST(data-&gt;&gt;'battery_level' AS FLOAT)) &lt; 20;\n</code></pre>"},{"location":"operations/monitoring/#information-alerts-email","title":"Information Alerts (Email)","text":""},{"location":"operations/monitoring/#daily-summary","title":"Daily Summary","text":"<pre><code>-- Daily system summary\nSELECT \n    'Daily Summary' as alert_type,\n    COUNT(DISTINCT devid) as active_devices,\n    COUNT(*) as total_messages,\n    AVG(EXTRACT(EPOCH FROM (NOW() - timestamp))) / 60 as avg_delay_minutes,\n    COUNT(CASE WHEN data_type = 'location' THEN 1 END) as location_updates\nFROM sensor_data \nWHERE timestamp &gt; NOW() - INTERVAL '24 hours';\n</code></pre>"},{"location":"operations/monitoring/#log-management","title":"Log Management","text":""},{"location":"operations/monitoring/#structured-logging","title":"Structured Logging","text":""},{"location":"operations/monitoring/#edge-function-logging","title":"Edge Function Logging","text":"<pre><code>// Structured log entry\nfunction logMetric(level, message, metadata = {}) {\n  const logEntry = {\n    timestamp: new Date().toISOString(),\n    level: level,\n    message: message,\n    service: 'ingest-sensor-data',\n    ...metadata\n  };\n\n  console.log(JSON.stringify(logEntry));\n}\n\n// Usage examples\nlogMetric('INFO', 'Device data processed', {\n  devid: 'device_001',\n  processing_time_ms: 150,\n  location_source: 'gnss'\n});\n\nlogMetric('ERROR', 'HMAC verification failed', {\n  devid: 'device_002',\n  error_code: 'INVALID_SIGNATURE'\n});\n</code></pre>"},{"location":"operations/monitoring/#flyio-server-logging","title":"Fly.io Server Logging","text":"<pre><code>import logging\nimport json\nfrom datetime import datetime\n\n# Configure structured logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(message)s'\n)\n\nlogger = logging.getLogger(__name__)\n\ndef log_structured(level, message, **kwargs):\n    log_entry = {\n        'timestamp': datetime.utcnow().isoformat(),\n        'level': level,\n        'message': message,\n        'service': 'coap-server',\n        **kwargs\n    }\n    logger.log(getattr(logging, level), json.dumps(log_entry))\n\n# Usage\nlog_structured('INFO', 'CoAP message received', \n               devid='device_001', \n               payload_size=256)\n</code></pre>"},{"location":"operations/monitoring/#log-aggregation","title":"Log Aggregation","text":""},{"location":"operations/monitoring/#query-examples","title":"Query Examples","text":"<pre><code># Fly.io logs filtering\nflyctl logs --app your-coap-server | grep \"ERROR\"\nflyctl logs --app your-coap-server --since 1h | grep \"device_001\"\n\n# Supabase function logs\nsupabase functions logs --filter edge-function-name | grep \"WARN\"\n</code></pre>"},{"location":"operations/monitoring/#log-retention-policy","title":"Log Retention Policy","text":"<ul> <li>Edge Function Logs: 7 days (Supabase default)</li> <li>Fly.io Logs: 30 days </li> <li>Database Logs: 90 days</li> <li>Critical Events: Exported to long-term storage</li> </ul>"},{"location":"operations/monitoring/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"operations/monitoring/#response-time-tracking","title":"Response Time Tracking","text":""},{"location":"operations/monitoring/#percentile-analysis","title":"Percentile Analysis","text":"<pre><code>-- Response time percentiles (if tracking in database)\nSELECT \n    PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY processing_time_ms) as p50,\n    PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY processing_time_ms) as p95,\n    PERCENTILE_CONT(0.99) WITHIN GROUP (ORDER BY processing_time_ms) as p99,\n    AVG(processing_time_ms) as avg_response_time\nFROM performance_logs \nWHERE timestamp &gt; NOW() - INTERVAL '1 hour';\n</code></pre>"},{"location":"operations/monitoring/#capacity-planning","title":"Capacity Planning","text":""},{"location":"operations/monitoring/#growth-metrics","title":"Growth Metrics","text":"<pre><code>-- Device growth rate\nSELECT \n    DATE(timestamp) as date,\n    COUNT(DISTINCT previous.devid) as devices_yesterday,\n    COUNT(DISTINCT current.devid) as devices_today,\n    COUNT(DISTINCT current.devid) - COUNT(DISTINCT previous.devid) as net_growth\nFROM sensor_data current\nLEFT JOIN sensor_data previous ON previous.timestamp BETWEEN \n    current.timestamp - INTERVAL '2 days' AND \n    current.timestamp - INTERVAL '1 day'\nWHERE current.timestamp &gt; NOW() - INTERVAL '7 days'\nGROUP BY DATE(current.timestamp)\nORDER BY date;\n\n-- Message volume trends\nSELECT \n    DATE_TRUNC('hour', timestamp) as hour,\n    COUNT(*) as message_count,\n    COUNT(*) / 3600.0 as messages_per_second\nFROM sensor_data \nWHERE timestamp &gt; NOW() - INTERVAL '7 days'\nGROUP BY hour\nORDER BY hour;\n</code></pre>"},{"location":"operations/monitoring/#incident-response","title":"Incident Response","text":""},{"location":"operations/monitoring/#runbook-integration","title":"Runbook Integration","text":""},{"location":"operations/monitoring/#incident-detection","title":"Incident Detection","text":"<pre><code>#!/bin/bash\n# monitoring-check.sh\n\n# Check system health\nRECENT_DATA=$(psql -t -c \"SELECT COUNT(*) FROM sensor_data WHERE timestamp &gt; NOW() - INTERVAL '15 minutes'\")\n\nif [ \"$RECENT_DATA\" -eq 0 ]; then\n    echo \"CRITICAL: No recent data received\"\n    # Trigger PagerDuty alert\n    curl -X POST https://events.pagerduty.com/v2/enqueue \\\n      -H \"Content-Type: application/json\" \\\n      -d '{\"routing_key\":\"YOUR_KEY\",\"event_action\":\"trigger\",\"payload\":{\"summary\":\"IoT System Down\",\"severity\":\"critical\"}}'\nfi\n</code></pre>"},{"location":"operations/monitoring/#automated-recovery","title":"Automated Recovery","text":"<pre><code>#!/bin/bash\n# auto-recovery.sh\n\n# Restart Fly.io app if needed\nFLY_STATUS=$(flyctl status --json | jq -r '.Allocations[0].Status')\nif [ \"$FLY_STATUS\" != \"running\" ]; then\n    echo \"Restarting Fly.io app\"\n    flyctl restart\nfi\n\n# Check Edge Function health\nEDGE_STATUS=$(curl -s -o /dev/null -w \"%{http_code}\" https://cdwtsrzshpotkfbyyyjk.supabase.co/functions/v1/health)\nif [ \"$EDGE_STATUS\" != \"200\" ]; then\n    echo \"Edge Function unhealthy, redeploying\"\n    supabase functions deploy ingest-sensor-data\nfi\n</code></pre>"},{"location":"operations/monitoring/#escalation-procedures","title":"Escalation Procedures","text":"<ol> <li>Level 1 (Automated): Self-healing scripts, restart services</li> <li>Level 2 (On-call): Manual intervention, scaling adjustments</li> <li>Level 3 (Team): Architecture changes, external vendor issues</li> <li>Level 4 (Management): Business impact, security incidents</li> </ol>"},{"location":"operations/monitoring/#security-monitoring","title":"Security Monitoring","text":""},{"location":"operations/monitoring/#threat-detection","title":"Threat Detection","text":"<pre><code>-- Unusual device activity\nSELECT \n    devid,\n    COUNT(*) as message_count,\n    COUNT(DISTINCT EXTRACT(HOUR FROM timestamp)) as active_hours\nFROM sensor_data \nWHERE timestamp &gt; NOW() - INTERVAL '24 hours'\nGROUP BY devid\nHAVING COUNT(*) &gt; 1000  -- Threshold for unusual activity\nORDER BY message_count DESC;\n\n-- Failed authentication attempts\nSELECT \n    COUNT(*) as failed_attempts,\n    DATE_TRUNC('hour', timestamp) as hour\nFROM logs \nWHERE message LIKE '%HMAC verification failed%'\n  AND timestamp &gt; NOW() - INTERVAL '24 hours'\nGROUP BY hour\nHAVING COUNT(*) &gt; 10  -- Threshold for potential attack\nORDER BY hour;\n</code></pre>"},{"location":"operations/monitoring/#audit-trail","title":"Audit Trail","text":"<pre><code>-- User activity audit\nSELECT \n    user_id,\n    action,\n    resource,\n    timestamp,\n    ip_address\nFROM audit_logs \nWHERE timestamp &gt; NOW() - INTERVAL '24 hours'\nORDER BY timestamp DESC;\n</code></pre>"},{"location":"operations/troubleshooting/","title":"Troubleshooting Guide","text":""},{"location":"operations/troubleshooting/#common-issues","title":"Common Issues","text":""},{"location":"operations/troubleshooting/#device-connection-problems","title":"Device Connection Problems","text":"<ul> <li>Check network connectivity</li> <li>Verify CoAP server is running on Fly.io</li> <li>Validate device configuration</li> </ul>"},{"location":"operations/troubleshooting/#data-not-appearing-in-dashboard","title":"Data Not Appearing in Dashboard","text":"<ul> <li>Check Supabase Edge Function logs</li> <li>Verify HMAC signatures</li> <li>Review database permissions</li> </ul>"},{"location":"operations/troubleshooting/#performance-issues","title":"Performance Issues","text":"<ul> <li>Monitor Fly.io resource usage</li> <li>Check database query performance</li> <li>Review frontend console for errors</li> </ul> <p>For detailed troubleshooting, refer to the main documentation files: - Fly.io Setup - System Architecture - Development Guide</p>"},{"location":"reference/changelog/","title":"Change Log","text":""},{"location":"reference/changelog/#latest-2025-01-xx","title":"[Latest] - 2025-01-XX","text":""},{"location":"reference/changelog/#added","title":"Added","text":"<ul> <li>Comprehensive documentation structure</li> <li>MkDocs configuration with Material theme</li> <li>GitHub Pages deployment workflow</li> </ul>"},{"location":"reference/changelog/#documentation","title":"Documentation","text":"<ul> <li>System architecture overview</li> <li>Data flow diagrams and guides</li> <li>Fly.io deployment instructions</li> <li>Development and troubleshooting guides</li> </ul>"},{"location":"reference/changelog/#infrastructure","title":"Infrastructure","text":"<ul> <li>Supabase backend integration</li> <li>Real-time data synchronization</li> <li>Row Level Security (RLS) policies</li> </ul>"},{"location":"reference/changelog/#previous-versions","title":"Previous Versions","text":""},{"location":"reference/changelog/#initial-release","title":"Initial Release","text":"<ul> <li>IoT device management dashboard</li> <li>CoAP data ingestion via Fly.io</li> <li>React frontend with TypeScript</li> <li>Leaflet maps for device visualization</li> <li>User authentication and role management</li> </ul>"},{"location":"reference/changelog/#upcoming","title":"Upcoming","text":""},{"location":"reference/changelog/#planned-features","title":"Planned Features","text":"<ul> <li>Device alerts and notifications</li> <li>Advanced analytics dashboard</li> <li>Mobile application support</li> <li>Enhanced security features</li> </ul> <p>For detailed development information, see Development Guide.</p>"},{"location":"reference/database/","title":"Database Schema Reference","text":""},{"location":"reference/database/#core-tables","title":"Core Tables","text":""},{"location":"reference/database/#device_config","title":"device_config","text":"<p>Stores IoT device configuration and metadata.</p> <pre><code>CREATE TABLE device_config (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  device_id TEXT UNIQUE NOT NULL,\n  user_id UUID REFERENCES auth.users,\n  device_name TEXT,\n  device_type TEXT,\n  location JSONB,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()\n);\n</code></pre>"},{"location":"reference/database/#sensor_data","title":"sensor_data","text":"<p>Stores time-series sensor readings from devices.</p> <pre><code>CREATE TABLE sensor_data (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  device_id TEXT NOT NULL,\n  sensor_type TEXT NOT NULL,\n  data JSONB NOT NULL,\n  timestamp TIMESTAMP WITH TIME ZONE DEFAULT now(),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT now()\n);\n</code></pre>"},{"location":"reference/database/#row-level-security-rls","title":"Row Level Security (RLS)","text":""},{"location":"reference/database/#policies","title":"Policies","text":"<ul> <li>Users can only access their own devices</li> <li>Sensor data is filtered by device ownership</li> <li>Admin users have full access</li> </ul>"},{"location":"reference/database/#indexes","title":"Indexes","text":""},{"location":"reference/database/#performance-indexes","title":"Performance Indexes","text":"<pre><code>CREATE INDEX idx_sensor_data_device_timestamp ON sensor_data(device_id, timestamp DESC);\nCREATE INDEX idx_device_config_user_id ON device_config(user_id);\n</code></pre> <p>For detailed schema information, see System Architecture.</p>"},{"location":"reference/environment/","title":"Environment Variables","text":""},{"location":"reference/environment/#flyio-server-environment","title":"Fly.io Server Environment","text":""},{"location":"reference/environment/#required-variables","title":"Required Variables","text":"<pre><code>FLY_INGEST_SECRET=your-secret-key\nSUPABASE_URL=https://your-project.supabase.co\nSUPABASE_ANON_KEY=your-anon-key\n</code></pre>"},{"location":"reference/environment/#setting-variables","title":"Setting Variables","text":"<pre><code>flyctl secrets set FLY_INGEST_SECRET=\"your-secret\" -a your-app\nflyctl secrets set SUPABASE_URL=\"https://your-project.supabase.co\" -a your-app\nflyctl secrets set SUPABASE_ANON_KEY=\"your-anon-key\" -a your-app\n</code></pre>"},{"location":"reference/environment/#frontend-environment","title":"Frontend Environment","text":""},{"location":"reference/environment/#development-envlocal","title":"Development (.env.local)","text":"<pre><code>VITE_SUPABASE_URL=https://your-project.supabase.co\nVITE_SUPABASE_ANON_KEY=your-anon-key\n</code></pre>"},{"location":"reference/environment/#security-notes","title":"Security Notes","text":"<ul> <li>Never commit secrets to version control</li> <li>Use different secrets for development/production</li> <li>Rotate secrets periodically</li> <li>Use secure secret management in production</li> </ul> <p>For deployment details, see Fly.io Setup.</p>"}]}